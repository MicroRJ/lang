-- BYTECODE --
- FILE (code\tests\find.lang):
INDEX INSTRUCTION
0000	loadglobal(x=0,y=41)  // C()
0001	loadglobal(x=1,y=44)  // "code/tests"
0002	call(x=0,y=1,z=0)
0003	loadglobal(x=0,y=5)  // C()
0004	loadglobal(x=1,y=45)  // "filefind.web2.ignore"
0005	loadglobal(x=2,y=46)  // "wb"
0006	call(x=0,y=2,z=1)
0007	delay(x=5)
0008	loadglobal(x=1,y=6)  // C()
0009	reload(x=2,y=0)
0010	call(x=1,y=1,z=0)
0011	leave(x=0)
0012	loadglobal(x=1,y=11)  // C()
0013	call(x=1,y=0,z=1)
0014	delay(x=8)
0015	loadglobal(x=2,y=9)  // C()
0016	loadglobal(x=3,y=47)  // " => took: "
0017	loadglobal(x=4,y=12)  // C()
0018	reload(x=5,y=1)
0019	call(x=4,y=1,z=1)
0020	call(x=2,y=2,z=0)
0021	leave(x=0)
0022	delay(x=10)
0023	loadglobal(x=2,y=8)  // C()
0024	reload(x=3,y=0)
0025	loadglobal(x=4,y=48)  // "



 => took: "
0026	loadglobal(x=5,y=12)  // C()
0027	reload(x=6,y=1)
0028	call(x=5,y=1,z=1)
0029	loadglobal(x=6,y=49)  // "
"
0030	call(x=2,y=4,z=0)
0031	leave(x=0)
0032	loadglobal(x=2,y=8)  // C()
0033	reload(x=3,y=0)
0034	loadglobal(x=4,y=50)  // "found files:
"
0035	call(x=2,y=2,z=0)
0036	loadglobal(x=2,y=51)  // "C:\Program Files\Common Files\microsoft shared\VSTO"
0037	loadglobal(x=3,y=9)  // C()
0038	loadglobal(x=4,y=52)  // "filtering files in: "
0039	reload(x=5,y=2)
0040	call(x=3,y=2,z=0)
0041	j(x=23)
0042	loadint(x=2,y=0) #0
0043	jz(x=2,y=2)
0044	j(x=8)
0045	loadglobal(x=3,y=53)  // "name"
0046	getfield(x=2,y=0,z=3)
0047	loadglobal(x=4,y=54)  // "match"
0048	metaname(x=3,y=2,z=4)
0049	loadglobal(x=4,y=55)  // "*.js|*.html|*.css|*.xml|*.php|*.ts"
0050	metacall(x=2,y=1,z=1)
0051	jz(x=10,y=2)
0052	loadglobal(x=2,y=8)  // C()
0053	loadcached(x=3,y=0)
0054	loadglobal(x=5,y=56)  // "name"
0055	getfield(x=4,y=0,z=5)
0056	loadglobal(x=5,y=57)  // ", "
0057	loadglobal(x=7,y=58)  // "path"
0058	getfield(x=6,y=0,z=7)
0059	loadglobal(x=7,y=59)  // "
"
0060	call(x=2,y=5,z=0)
0061	loadint(x=2,y=1) #1
0062	yield(x=1,y=2,z=1)
0063	leave(x=0)
0064	loadglobal(x=3,y=14)  // C()
0065	reload(x=4,y=2)
0066	reload(x=5,y=0)
0067	newclosure(x=5,y=0,z=0)
0068	call(x=3,y=2,z=1)
0069	leave(x=0)
// STATUS [FIXED]:
// GC would trigger when a new object
// was created, however, I was careless
// and I was modifying the value of
// where the object resided before the
// object was created, making the gc
// think that the object was a different
// type.
// ; locals[b.x].tag = TAG_TAB;
// ; locals[b.x].t   = elf_newtab(R);
// So when the gc would check local at b.x
// it would think that it was a table, when
// it wasn't.
// The fix is just to create the object,
// then modify the value.
__gc()
for i in 0..422 ? {let thing={}}
__logging(true)
for i in 0..1024 ? {
	let thing = {}
	pf("i: ", i, " = ", thing)
}
pf("here")
leave (false)
-- BYTECODE --
- INSTR: 28
- PID: 8672
- FILE (code\tests\bug1.elf):
INDEX INSTRUCTION
0000	loadglobal(x=0,y=29)  // C()
0001	call(x=0,y=0,z=0)
0002	loadint(x=0,y=0) #0
0003	loadint(x=1,y=1) #512
0004	lt(x=2,y=0,z=1)
0005	jz(x=17,y=2)
0006	loadglobal(x=2,y=33)  // C()
0007	loadint(x=3,y=2) #1
0008	call(x=2,y=1,z=0)
0009	newtable(x=2)
0010	loadglobal(x=3,y=21)  // C()
0011	loadglobal(x=4,y=68)  // "i: "
0012	reload(x=5,y=0)
0013	loadglobal(x=6,y=69)  // " = "
0014	reload(x=7,y=2)
0015	call(x=3,y=4,z=0)
0016	loadglobal(x=3,y=33)  // C()
0017	loadint(x=4,y=3) #0
0018	call(x=3,y=1,z=0)
0019	loadint(x=2,y=4) #1
0020	add(x=0,y=0,z=2)
0021	j(x=-17)
0022	loadglobal(x=0,y=21)  // C()
0023	loadglobal(x=1,y=70)  // "here"
0024	call(x=0,y=1,z=0)
0025	loadint(x=0,y=5) #0
0026	yield(x=1,y=0,z=1)
0027	leave(x=0)
// STATUS: [FIXED]
// Solution:
// It was a simple facepalm moment bug, I was
// iterating over the GC array whilst removing
// items from it by swapping the current item
// with the last one but I forgot to decrement
// the index so that it wouldn't skip item that
// I swapped with.
// Bug:
// The GC fails to actually collect anything,
// it marks everything properly and it tells
// you so, but it doesn't actually collect
// the unmarked objects.
// here are some logs:
// here marked means the number of objects that went
// from specifically from white to black.
// (tbf) = to be freed
// / = the total number of objects
// (->) what it should go down to
// DEBUG lgc.c[142] elf_collect(): tbf: 426/512 -> 86
// DEBUG lgc.c[168] elf_collect():         => leaked: 213, 1, 0
// DEBUG lgc.c[142] elf_collect(): tbf: 938/1024 -> 86
// DEBUG lgc.c[168] elf_collect():         => leaked: 469, 1, 0
// DEBUG lgc.c[142] elf_collect(): tbf: 1962/2048 -> 86
// DEBUG lgc.c[168] elf_collect():         => leaked: 981, 1, 0
//
for i in 0..100000 ? {
	let thing = {}
}
pf("here")
leave (false)
-- BYTECODE --
- INSTR: 14
- PID: 17752
- FILE (code\tests\bug2.elf):
INDEX INSTRUCTION
0000	loadint(x=0,y=0) #0
0001	loadint(x=1,y=1) #100000
0002	lt(x=2,y=0,z=1)
0003	jz(x=5,y=2)
0004	newtable(x=2)
0005	loadint(x=2,y=2) #1
0006	add(x=0,y=0,z=2)
0007	j(x=-5)
0008	loadglobal(x=0,y=21)  // C()
0009	loadglobal(x=1,y=68)  // "here"
0010	call(x=0,y=1,z=0)
0011	loadint(x=0,y=3) #0
0012	yield(x=1,y=0,z=1)
0013	leave(x=0)
// [STATUS:FIXED]
// Bug: given the language specs,
// a() should evaluate each time
// the check is made, however it
// doesn't.
// Solution:
// Simply fix the jump so that it
// returns to where the condition
// is reevaluated completely.
a = fun() ? { pf("a") leave 24 }
for i in 0..a() ? {
	pf(i)
}
leave (false)
-- BYTECODE --
- INSTR: 23
- PID: 23848
- FILE (code\tests\bug3.elf):
INDEX INSTRUCTION
0000	j(x=7)
0001	loadglobal(x=0,y=21)  // C()
0002	loadglobal(x=1,y=69)  // "a"
0003	call(x=0,y=1,z=0)
0004	loadint(x=0,y=0) #24
0005	yield(x=1,y=0,z=1)
0006	leave(x=0)
0007	newclosure(x=0,y=0,z=0)
0008	setglobal(x=68,y=0)
0009	loadint(x=0,y=1) #0
0010	loadglobal(x=1,y=68)  // F()
0011	call(x=1,y=0,z=1)
0012	lt(x=2,y=0,z=1)
0013	jz(x=7,y=2)
0014	loadglobal(x=2,y=21)  // C()
0015	reload(x=3,y=0)
0016	call(x=2,y=1,z=0)
0017	loadint(x=2,y=2) #1
0018	add(x=0,y=0,z=2)
0019	j(x=-9)
0020	loadint(x=0,y=3) #0
0021	yield(x=1,y=0,z=1)
0022	leave(x=0)
__logging(false)

fibtab = {}
fibmem = fun (n) ? {
	if n < 2 ? leave n
	fibtab[n] ?= fibmem(n - 1) + fibmem(n - 2)
	leave fibtab[n]
}

fibraw = fun (n) ? {
	if n < 2 ? leave n
	leave fibraw(n - 1) + fibraw(n - 2)
}

let fib = fibmem

failed = false

let test = fun (x,y) ? {
	let k = fib(x)
	failed ?= k != y
	pf("fib(", x , ") => ", k)
	if k != y ? pf("	expected: ", y)
}

test(0,0)
test(1,1)
test(2,1)
test(3,2)
test(4,3)
test(10,55)
test(25,75025)
if fib == fibmem ? {
	test(30,832040)
	test(35,9227465)
	test(40,102334155)
	/* todo: when come back, this number is too large
	to be represented literally, fix this, add to
	constant pool */
	test(65,17167680177565)
}

if failed ? {
	fibtab:iter(fun(x,y) ? {
		pf(x, " = ", y)
	})
}
(module
	(func $fib (export "fib") (param i32) (result i32)
		(i32.gt_u (local.get 0) (i32.const 1))
		if (result i32)
			(i32.add
      			(call $fib (i32.sub (local.get 0) (i32.const 1)))
				(call $fib (i32.sub (local.get 0) (i32.const 2))))
		else
			local.get 0
	end)
)found files:
diagerr.xml, C:\$SysReset\Logs\diagerr.xml
diagwrn.xml, C:\$SysReset\Logs\diagwrn.xml
SessionID.xml, C:\$SysReset\Logs\SessionID.xml
Timestamp.xml, C:\$SysReset\Logs\Timestamp.xml
ResetSession.xml, C:\$SysReset\ResetSession.xml
Rollback.xml, C:\$SysReset\Rollback.xml
diagerr.xml, C:\$WINDOWS.~BT\Sources\Panther\diagerr.xml
diagwrn.xml, C:\$WINDOWS.~BT\Sources\Panther\diagwrn.xml
diagerr.xml, C:\$Windows.~WS\Sources\Panther\diagerr.xml
diagwrn.xml, C:\$Windows.~WS\Sources\Panther\diagwrn.xml
windlp.state-old.xml, C:\$Windows.~WS\Sources\Panther\windlp.state-old.xml
windlp.state.xml, C:\$Windows.~WS\Sources\Panther\windlp.state.xml
products.xml, C:\$Windows.~WS\Sources\products.xml
ReAgent.xml, C:\$WinREAgent\Backup\ReAgent.xml
Rollback.xml, C:\$WinREAgent\Rollback.xml
AMDAUEPInstaller.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\AMDAUEPInstaller.xml
AMDCOMPUTE.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\AMDCOMPUTE.xml
AMDLinkDriverUpdate.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\AMDLinkDriverUpdate.xml
AMDRELAUNCHER.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\AMDRELAUNCHER.xml
AMDScoSupportTypeUpdate.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\AMDScoSupportTypeUpdate.xml
AMDUpdater.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\AMDUpdater.xml
AMDUWPLauncher.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\AMDUWPLauncher.xml
BuildHighlights.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\BuildHighlights.xml
EnableWindowsDriverSearch.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\EnableWindowsDriverSearch.xml
InstallUEP.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\InstallUEP.xml
ModifyLinkUpdate.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\ModifyLinkUpdate.xml
MonetCHS.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetCHS.xml
MonetCHT.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetCHT.xml
MonetCSY.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetCSY.xml
MonetDAN.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetDAN.xml
MonetDEU.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetDEU.xml
MonetENU.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetENU.xml
MonetESP.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetESP.xml
MonetFIN.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetFIN.xml
MonetFRA.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetFRA.xml
MonetGRK.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetGRK.xml
MonetHNG.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetHNG.xml
MonetITA.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetITA.xml
MonetJPN.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetJPN.xml
MonetKOR.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetKOR.xml
MonetNLD.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetNLD.xml
MonetNOR.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetNOR.xml
MonetPLK.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetPLK.xml
MonetPTB.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetPTB.xml
MonetRSA.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetRSA.xml
MonetSVE.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetSVE.xml
MonetTHA.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetTHA.xml
MonetTRK.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\MonetTRK.xml
workaround.xml, C:\AMD\AMD_Software_Installer_23.10.2\Config\workaround.xml
AMDAUEPInstaller.xml, C:\Program Files\AMD\CIM\Config\AMDAUEPInstaller.xml
AMDCOMPUTE.xml, C:\Program Files\AMD\CIM\Config\AMDCOMPUTE.xml
AMDLinkDriverUpdate.xml, C:\Program Files\AMD\CIM\Config\AMDLinkDriverUpdate.xml
AMDRELAUNCHER.xml, C:\Program Files\AMD\CIM\Config\AMDRELAUNCHER.xml
AMDScoSupportTypeUpdate.xml, C:\Program Files\AMD\CIM\Config\AMDScoSupportTypeUpdate.xml
AMDUpdater.xml, C:\Program Files\AMD\CIM\Config\AMDUpdater.xml
AMDUWPLauncher.xml, C:\Program Files\AMD\CIM\Config\AMDUWPLauncher.xml
BuildHighlights.xml, C:\Program Files\AMD\CIM\Config\BuildHighlights.xml
EnableWindowsDriverSearch.xml, C:\Program Files\AMD\CIM\Config\EnableWindowsDriverSearch.xml
InstallUEP.xml, C:\Program Files\AMD\CIM\Config\InstallUEP.xml
ModifyLinkUpdate.xml, C:\Program Files\AMD\CIM\Config\ModifyLinkUpdate.xml
MonetCHS.xml, C:\Program Files\AMD\CIM\Config\MonetCHS.xml
MonetCHT.xml, C:\Program Files\AMD\CIM\Config\MonetCHT.xml
MonetCSY.xml, C:\Program Files\AMD\CIM\Config\MonetCSY.xml
MonetDAN.xml, C:\Program Files\AMD\CIM\Config\MonetDAN.xml
MonetDEU.xml, C:\Program Files\AMD\CIM\Config\MonetDEU.xml
MonetENU.xml, C:\Program Files\AMD\CIM\Config\MonetENU.xml
MonetESP.xml, C:\Program Files\AMD\CIM\Config\MonetESP.xml
MonetFIN.xml, C:\Program Files\AMD\CIM\Config\MonetFIN.xml
MonetFRA.xml, C:\Program Files\AMD\CIM\Config\MonetFRA.xml
MonetGRK.xml, C:\Program Files\AMD\CIM\Config\MonetGRK.xml
MonetHNG.xml, C:\Program Files\AMD\CIM\Config\MonetHNG.xml
MonetITA.xml, C:\Program Files\AMD\CIM\Config\MonetITA.xml
MonetJPN.xml, C:\Program Files\AMD\CIM\Config\MonetJPN.xml
MonetKOR.xml, C:\Program Files\AMD\CIM\Config\MonetKOR.xml
MonetNLD.xml, C:\Program Files\AMD\CIM\Config\MonetNLD.xml
MonetNOR.xml, C:\Program Files\AMD\CIM\Config\MonetNOR.xml
MonetPLK.xml, C:\Program Files\AMD\CIM\Config\MonetPLK.xml
MonetPTB.xml, C:\Program Files\AMD\CIM\Config\MonetPTB.xml
MonetRSA.xml, C:\Program Files\AMD\CIM\Config\MonetRSA.xml
MonetSVE.xml, C:\Program Files\AMD\CIM\Config\MonetSVE.xml
MonetTHA.xml, C:\Program Files\AMD\CIM\Config\MonetTHA.xml
MonetTRK.xml, C:\Program Files\AMD\CIM\Config\MonetTRK.xml
workaround.xml, C:\Program Files\AMD\CIM\Config\workaround.xml
report.xml, C:\Program Files\AMD\CIM\Reports\report.xml
report.xml.2022_08_30_17.00.03.xml, C:\Program Files\AMD\CIM\Reports\report.xml.2022_08_30_17.00.03.xml
report.xml.2023_06_30_20.20.42.xml, C:\Program Files\AMD\CIM\Reports\report.xml.2023_06_30_20.20.42.xml
report.xml.2023_11_09_14.13.52.xml, C:\Program Files\AMD\CIM\Reports\report.xml.2023_11_09_14.13.52.xml
Branding.xml, C:\Program Files\AMD\CNext\CNBranding\Branding.xml
Install.xml, C:\Program Files\AMD\CNext\CNBranding\Install.xml
welcome_generic.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\de\welcome_generic.html
welcome_generic_small.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\de\welcome_generic_small.html
welcome_generic.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\en-US\welcome_generic.html
welcome_generic_small.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\en-US\welcome_generic_small.html
welcome_generic.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\es\welcome_generic.html
welcome_generic_small.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\es\welcome_generic_small.html
welcome_generic.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\fr\welcome_generic.html
welcome_generic_small.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\fr\welcome_generic_small.html
welcome_generic.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\it\welcome_generic.html
welcome_generic_small.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\it\welcome_generic_small.html
welcome_generic.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\ko\welcome_generic.html
welcome_generic_small.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\ko\welcome_generic_small.html
welcome_generic.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\pt-BR\welcome_generic.html
welcome_generic_small.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\pt-BR\welcome_generic_small.html
welcome_generic.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\zh-CHS\welcome_generic.html
welcome_generic_small.html, C:\Program Files\AMD\CNext\CNBranding\Welcome\zh-CHS\welcome_generic_small.html
C2RHeartbeatConfig.xml, C:\Program Files\Common Files\microsoft shared\ClickToRun\C2RHeartbeatConfig.xml
FrequentOfficeUpdateSchedule.xml, C:\Program Files\Common Files\microsoft shared\ClickToRun\FrequentOfficeUpdateSchedule.xml
officesvcmgrschedule.xml, C:\Program Files\Common Files\microsoft shared\ClickToRun\officesvcmgrschedule.xml
ServiceWatcherSchedule.xml, C:\Program Files\Common Files\microsoft shared\ClickToRun\ServiceWatcherSchedule.xml
Alphabet.xml, C:\Program Files\Common Files\microsoft shared\ink\Alphabet.xml
Content.xml, C:\Program Files\Common Files\microsoft shared\ink\Content.xml
auxbase.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\auxpad\auxbase.xml
auxpad.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\auxpad.xml
insertbase.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\insert\insertbase.xml
insert.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\insert.xml
ea.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\keypad\ea.xml
keypadbase.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\keypad\keypadbase.xml
kor-kor.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\keypad\kor-kor.xml
keypad.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\keypad.xml
base.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\base.xml
baseAltGr_rtl.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\baseAltGr_rtl.xml
base_altgr.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\base_altgr.xml
base_ca.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\base_ca.xml
base_heb.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\base_heb.xml
base_jpn.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\base_jpn.xml
base_kor.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\base_kor.xml
base_rtl.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\base_rtl.xml
ja-jp.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\ja-jp.xml
ko-kr.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\ko-kr.xml
zh-changjei.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\zh-changjei.xml
zh-dayi.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\zh-dayi.xml
zh-phonetic.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main\zh-phonetic.xml
main.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\main.xml
oskclearuibase.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\oskclearui\oskclearuibase.xml
oskclearui.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\oskclearui.xml
oskmenubase.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\oskmenu\oskmenubase.xml
oskmenu.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\oskmenu.xml
osknavbase.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\osknav\osknavbase.xml
osknav.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\osknav.xml
osknumpadbase.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\osknumpad\osknumpadbase.xml
osknumpad.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\osknumpad.xml
oskpredbase.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\oskpred\oskpredbase.xml
oskpred.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\oskpred.xml
ea-sym.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\symbols\ea-sym.xml
ja-jp-sym.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\symbols\ja-jp-sym.xml
symbase.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\symbols\symbase.xml
symbols.xml, C:\Program Files\Common Files\microsoft shared\ink\fsdefinitions\symbols.xml
ipsar.xml, C:\Program Files\Common Files\microsoft shared\ink\ipsar.xml
ipscat.xml, C:\Program Files\Common Files\microsoft shared\ink\ipscat.xml
ipschs.xml, C:\Program Files\Common Files\microsoft shared\ink\ipschs.xml
ipscht.xml, C:\Program Files\Common Files\microsoft shared\ink\ipscht.xml
ipscsy.xml, C:\Program Files\Common Files\microsoft shared\ink\ipscsy.xml
ipsdan.xml, C:\Program Files\Common Files\microsoft shared\ink\ipsdan.xml
ipsdeu.xml, C:\Program Files\Common Files\microsoft shared\ink\ipsdeu.xml
ipsel.xml, C:// __logging(true)
// finally __logging(false)

testfn = fun() ? {
	// finally pf(".7")
	// pf(".0")
	// finally pf(".6")
	// pf(".1")
	// finally pf(".5")
	// pf(".2")
	// finally pf(".4")
	// pf(".3")

	finally leave "leave 4"
	finally leave "leave 3"
	finally leave "leave 2"
	finally leave "leave 1"
	leave "leave 0"
}

failed = testfn() != "leave 4"
if (failed) ? pf("failed")
leave failed
_chdir("code/tests")


let sysfile = fopen("filefind.web2.ignore","wb")
finally fclose(sysfile)

let _time = clocktime()
finally pf(" => took: ", timediffs(_time))
finally fpf(sysfile,"\n\n\n\n => took: ", timediffs(_time), "\n")

fpf(sysfile,"found files:\n")
let dir = "C:"
pf("filtering files in: ",dir)

let list = listdir(dir,fun(file,flags) ? {
	if 0 ?
	elif file.name:match("*.js|*.html|*.css|*.xml|*.php|*.ts") ?
	// elif file.name:match("*.cpp")  ?
	// elif file.name:match("*.hpp")  ?
	// elif file.name:match("*.c")    ?
	// elif file.name:match("*.h")    ?
	// elif file.name:match("*.swift") ?
	// elif file.name:match("*.obj|*.dll|*.lib|*.exp|*.pdb|*.exe|*.so") ?
	then {
		fpf(sysfile,file.name,", ",file.path, "\n")
	}
	leave true
})
__logging(false)
let j
for i in (((0)))..(((10))) ? j = i
failed = j != 9
/* global */

failed = false

test = fun(x) ? {
	iff x ? failed = true
}

if __a ? pf("cannot conduct test")
if __b ? pf("cannot conduct test")
if __c ? pf("cannot conduct test")

fun () ? {
	__a = true
	fun () ? { __b = true
		fun () ? { __c = true
			test(__a == true)
			test(__b == true)
			test(__c == true)
		}()
	}()
}()


call = fun (x) ? {
	x()
}


fun(x,y,z) ? {
	test(x == 1)
	test(y == 2)
	test(z == 3)
	call(fun () ? {
		test(x == 1)
		test(y == 2)
		test(z == 3)
	})
} (1,2,3)


leave failedfailed = true
(fun()?(fun()?(fun()?(fun()?{failed=false})))) ()()()()

if failed ? pf("failed") else pf("success")
mytable = {}
mytable = {}
mytable = {}
mytable = {}
mytable = {}

gc()


//
//    [1,2,3,4]
//  [1,2]    [3,4]
// [1] [2]  [3] [4]
// ----------------
// [2] [1]  [4] [3]
//  [4,3]    [2,1]
//    [4,3,2,1]
//

//
//    [1,8,7,9]
//  [1,8]    [7,9]
// [1] [8]  [7] [9]
// ----------------
// [8] [1]  [9] [7]
//  [9,7]    [8,1]
//    [9,8,7,1]
//

// C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build

local sysfile = fopen("hashbench.ignore","ab")
fpf(sysfile,"Hash table benchmarks:\n")

local run = fun(x) ? {
	gcpause()
	pf("filtering files in: ", x)
	_time = clocktime()
	// listdir takes a function used for filtering!
	local list = listdir(x,fun(file,flags) ? {
		if 512 < flags.n ? {
			leave false
		}
		flags.n = flags.n + 1;
		// fpf(sysfile,"file: ",file.name,"\n")
		if file.name:match("*.h") || file.name:match("*.c") ? {
			// if file.name:match("vcvars*.bat") ? {
			pf("found: ", file.name)
		}
		leave true
	})
	fpf(sysfile,"elapsed: ", timediffs(_time), "\n")
	fpf(sysfile,"items: ", list:length, ", hits: ", list:collisions, "\n")
	fpf(sysfile,"====================================\n")
}
// run("C:/Program Files/Microsoft Visual Studio")
// run("C:/Program Files")
run("W:")
__logging(false)
if false ? failed = true
iff true ? failed = true
let test = fun(x,y) ? {
	failed ?= x != y
	if x != y ? pf("failed")
}
test(0 <= 1, true)
test(0 <= 1, true)
test(1 <= 1, true)
test(0 >= 0, true)
test(1 >= 1, true)
test(1 >= 0, true)
test(0 && 0 && 0 && 0, 0)
test(0 || 0 || 0 || 0, 0)
test(0 && 0 || 0, 0)
test(0 && 0 || 1, 1)
test(0 && 1 || 2, 1)
test(0 && 0, 0)
test(0 && 1, 0)
test(1 && 1, 1)
test(0 || 0, 0)
test(0 || 1, 1)
test(1 || 1, 1)
test(0 && 0 || 0, 0)


for x in 0..4 ? {
	if   x == 0 ? test(x == 0, true)
	elif x == 1 ? test(x == 1, true)
elif x == 2 ? test(x == 2, true)
else test(x >= 3, true)
}

if failed ? {
	pf("failed")
}

leave failedcore.xxx = fun(x) ? {	leave 1	}
core.yyy = fun(x) ? {	leave 2	}
core.zzz = fun(x) ? {	leave 3	}
leave core// x -> y ~= y -> x
ordinal = fun(x,y,z) -> {
	0,0,0  -> "zero"
	0,0,1  -> "one"
	0,1,0  -> "two"
	0,1,1  -> "three"
	1,0,0  -> "four"
	1,0,1  -> "five"
	1,1,0  -> "six"
	1,1,1  -> "seven"
	else -> "invalid"
}
add = fun(x,y) ? (x + y)
sub = ~add
mul = fun(x,y) ? (x * y)
div = ~mul
init = {1,2,3,4,5,6,7,8,9}
pf(init)

simp = fun() ? {
	local list = {}
	for i in 0..4 ? {
		local x = i
		local y = i*2
		local z = i*4

		list[i] = fun() ? {
			v = {}
			v.x = x
			v.y = y
			v.z = z
			leave v
		}
	}
	for i in 0..4 ? {
		pf(list[i]())
	}
}

simp()

for x in 0..4 ? {
	if x == 0 ? {
		pf(x, " if 0")
	} elif x == 1 ? {
		pf(x, " elif 1")
	} elif x == 2 ? {
		pf(x, " elif 2")
	} else {
		pf(x, " else")
	}
}

if 1 && 2 || 0 ? {
	pf("welcome")
} else {
	pf("not welcome");
}
test = fun(x,y) ? {
	if x != y ? {
		pf("FAIL: expected ", y, " instead got ", x)
	}
}
pf("begin")

_0 = fun() ? { pf("0") leave 0 }
_1 = fun() ? { pf("1") leave 1 }
_2 = fun() ? { pf("2") leave 2 }
_3 = fun() ? { pf("3") leave 3 }
{
	__logging(true)
	let istrue = 1 && 1
	__logging(false)
}

// let table = {}
// table.a = "a"
// table.b = "b"
// table.c = "c"
// table.d = "d"
// pf(table)

let test = fun(x,y) ? {
	iff x == y ? pf("failed")
}

while 0 ? pf("failed")
do pf("success") while 0

test(1 == 1 && 1 == 1, true)
test(1 == 1 && 1 == 0, false)
test(1,1)
test(0,0)
test(0 <= 1, true)
test(0 <= 1, true)
test(1 <= 1, true)
test(0 >= 0, true)
test(1 >= 1, true)
test(1 >= 0, true)
test(0 && 0 && 0 && 0, 0)
test(0 || 0 || 0 || 0, 0)
test(0 && 0 || 0, 0)
test(0 && 0 || 1, 1)
test(0 && 1 || 2, 1)
test(0 && 0, 0)
test(0 && 1, 0)
test(1 && 1, 1)
test(0 || 0, 0)
test(0 || 1, 1)
test(1 || 1, 1)
test(0 && 0 || 0, 0)

// if 1 && 1 ? pf("welcome")

// let xorshift = fun(x) ? {
// 	x = x ^ x << 13
// 	x = x ^ x >> 7
// 	x = x ^ x << 17
// 	leave x
// }
// let inn = xorshift(5280)
// pf("xor: ", inn)
// // // pf(1,2,3,4,5,6,7,8,9)
// // // let foo = fun() ? (2)
// // // let x = foo()
// // // pf(x)

// // /* clearly this is not how you do jitting,
// // we don't even know the types of anything */
// // let enum xorshiftjit = jit(xorshift)


/* todo: experiment with name spaces */

/* check include guard */
core2 = load "code/tests/core.lang"
core2 = load "code/tests/core.lang"
core2 = load "code/tests/core.lang"
core2 = load "code/tests/core.lang"
core2 = load "code/tests/core.lang"


load "code/tests/match.lang"

pf(pc(), ": calling core functions")

core2.xxx()
core2.yyy()
core2.zzz()

pf(pc(), ": done...")


failed = false
let test = fun(x,y) ? {
	if x != y ? pf("failed")
	if x != y ? failed = true
}
test("":match("*"),true)
test("":match("?"),false)
test("file.obj":match("*.obj|*.dll"),true)
test("file.dll":match("*.obj|*.dll"),true)
test("xxxyyyzzz":match("xxx*www"),false)
test("x.x":match("x?x"),true)
test(".x.":match("?x?"),true)
test(".x.":match("?y?"),false)
test("x.x":match("*x"),true)
test("x.x":match("x*"),true)
test("x.x":match("x*x"),true)
leave failedlet length = ({1,2,3}):length()
failed = length != 3
local x,y
x,y = 1,1
if unknown ? {
	x + y
} else {
	x,y = {"welcome"},{"welcome"}
}
x + y


let sampletable = {}
sampletable.j ?= 1
sampletable.j ?= 77
sampletable.j ?= 777
sampletable.j ?= 777
sampletable.j ?= 777
leave sampletable == 1if 0 ? {
	/* -- 4.10.24 [FIXED]
	| the loop does not execute, remove "__logging(true)" and
	| it works again  */
	let x = 0
	let y = 12
	__logging(true)
	for i in x..y ? pf("bug")
	/*
	---- BYTECODE ---- [WORKING]
	0000    loadint(x=0,y=0)
	0001    loadint(x=1,y=12)
	0002    lt(x=3,y=2,z=1)
	0003    jz(x=7,y=3)
	0004    loadglobal(x=3,y=9)  // C()
	0005    loadglobal(x=4,y=44)  // "bug"
	0006    call(x=3,y=1,z=0)
	....
	---- BYTECODE ---- [FAILING]
	0000    loadint(x=0,y=0)
	0001    loadint(x=1,y=12)
	0002    loadglobal(x=2,y=19)  // C()
	0003    loadint(x=3,y=1)
	0004    call(x=2,y=1,z=0)
	0005    lt(x=3,y=2,z=1)
	0006    jz(x=7,y=3)
	0013    leave(x=0) */
}


// let fn = fun(x) ? {
// 	if x == lnil ? x = 1
// 	for i in 0..12 ? pf("welcome")
// }

// let fn = fun() ? (0)

// lgi ?= {}
// lgi.lib ?= fn()

// pf(xx)
// let x = 0
// let y = 0
// if x == 0 ? x = 1 else x = 2
// y = x * x
failed = false

let enum test = fun(x,y) ? {
	failed ?= x != y
	if x != y ? {
		pf("failed, expected ", y, ", instead got ", x)
	}
}
main = fun(x,y,z) ? {
	test(stkget(0),"x")
	test(stkget(1),"y")
	test(stkget(2),"z")
	test(stkget(3),1)
	test(stkget(4),2)
	test(stkget(5),3)
}
main("x","y","z",1,2,3)
leave failed/* is a little weird that we use  lang to test lang code */
__logging(false)
let prevdir = pwd()
finally _chdir(prevdir)

let workdir = "code/tests"
pf("running all tests in: ", workdir)

_chdir(workdir)

let sysfile = fopen("tests.ignore","wb")
fpf(sysfile,"test scores:\n")
finally fpf(sysfile,"end of test run");

numfails = 0

let list = listdir(".",fun(file,flags) ? {
	iff file.name:match("*.test.lang") ? {
		leave false
	}
	let _time = clocktime()
	finally pf(" => took: ", timediffs(_time))
	pf("[TEST]: ", file.name)
	/* -- todo: ensure the test does declare
	more globals, store the global count
	beforehand, and then compare with after
	loading the file */
	load file.path
	__logging(false)
	numfails = numfails + 1
	/* failed is a global */
	if failed ? pf("[FAILED]")
	leave true
})


if numfails == 1 ? {
	pf(numfails, " test failed")
} elif numfails > 1 ? {
	pf(numfails, " tests failed")
} else {
	pf("all tests succeeded")
}


-- BYTECODE --
- INSTR: 927
- PID: 26780
- FILE (code\tests\test.lang):
INDEX INSTRUCTION
0000	loadglobal(x=0,y=33)  // C()
0001	loadint(x=1,y=0) #0
0002	call(x=0,y=1,z=0)
0003	loadglobal(x=0,y=16)  // C()
0004	call(x=0,y=0,z=1)
0005	delay(x=5)
0006	loadglobal(x=1,y=65)  // C()
0007	reload(x=2,y=0)
0008	call(x=1,y=1,z=0)
0009	leave(x=0)
0010	loadglobal(x=1,y=68)  // "code/tests"
0011	loadglobal(x=2,y=21)  // C()
0012	loadglobal(x=3,y=69)  // "running all tests in: "
0013	reload(x=4,y=1)
0014	call(x=2,y=2,z=0)
0015	loadglobal(x=2,y=65)  // C()
0016	reload(x=3,y=1)
0017	call(x=2,y=1,z=0)
0018	loadglobal(x=2,y=57)  // C()
0019	loadglobal(x=3,y=70)  // "tests.ignore"
0020	loadglobal(x=4,y=71)  // "wb"
0021	call(x=2,y=2,z=1)
0022	loadglobal(x=3,y=20)  // C()
0023	reload(x=4,y=2)
0024	loadglobal(x=5,y=72)  // "test scores:
"
0025	call(x=3,y=2,z=0)
0026	delay(x=6)
0027	loadglobal(x=3,y=20)  // C()
0028	reload(x=4,y=2)
0029	loadglobal(x=5,y=73)  // "end of test run"
0030	call(x=3,y=2,z=0)
0031	leave(x=0)
0032	loadint(x=3,y=1) #0
0033	setglobal(x=74,y=3)
0034	j(x=43)
0035	loadglobal(x=3,y=75)  // "name"
0036	getfield(x=2,y=0,z=3)
0037	loadglobal(x=4,y=76)  // "match"
0038	metafield(x=3,y=2,z=4)
0039	loadglobal(x=4,y=77)  // "*.test.lang"
0040	metacall(x=2,y=1,z=1)
0041	jnz(x=3,y=2)
0042	loadint(x=2,y=2) #0
0043	yield(x=33,y=2,z=1)
0044	loadglobal(x=2,y=23)  // C()
0045	call(x=2,y=0,z=1)
0046	delay(x=8)
0047	loadglobal(x=3,y=21)  // C()
0048	loadglobal(x=4,y=78)  // " => took: "
0049	loadglobal(x=5,y=24)  // C()
0050	reload(x=6,y=2)
0051	call(x=5,y=1,z=1)
0052	call(x=3,y=2,z=0)
0053	leave(x=0)
0054	loadglobal(x=3,y=21)  // C()
0055	loadglobal(x=4,y=79)  // "[TEST]: "
0056	loadglobal(x=6,y=80)  // "name"
0057	getfield(x=5,y=0,z=6)
0058	call(x=3,y=2,z=0)
0059	loadglobal(x=4,y=81)  // "path"
0060	getfield(x=3,y=0,z=4)
0061	loadfile(x=3,y=0,z=0)
0062	loadglobal(x=3,y=33)  // C()
0063	loadint(x=4,y=3) #0
0064	call(x=3,y=1,z=0)
0065	loadglobal(x=4,y=74)  // 10
0066	loadint(x=5,y=4) #1
0067	add(x=3,y=4,z=5)
0068	setglobal(x=74,y=3)
0069	loadglobal(x=3,y=82)  // 0
0070	jz(x=4,y=3)
0071	loadglobal(x=3,y=21)  // C()
0072	loadglobal(x=4,y=83)  // "[FAILED]"
0073	call(x=3,y=1,z=0)
0074	loadint(x=3,y=5) #1
0075	yield(x=1,y=3,z=1)
0076	leave(x=0)
0077	loadglobal(x=3,y=25)  // C()
0078	loadglobal(x=4,y=84)  // "."
0079	newclosure(x=5,y=0,z=0)
0080	call(x=3,y=2,z=1)
0081	loadglobal(x=5,y=74)  // 10
0082	loadint(x=6,y=6) #1
0083	eq(x=4,y=5,z=6)
0084	jz(x=6,y=4)
0085	loadglobal(x=4,y=21)  // C()
0086	loadglobal(x=5,y=74)  // 10
0087	loadglobal(x=6,y=85)  // " test failed"
0088	call(x=4,y=2,z=0)
0089	j(x=13)
0090	loadint(x=5,y=7) #1
0091	loadglobal(x=6,y=74)  // 10
0092	lt(x=4,y=5,z=6)
0093	jz(x=6,y=4)
0094	loadglobal(x=4,y=21)  // C()
0095	loadglobal(x=5,y=74)  // 10
0096	loadglobal(x=6,y=86)  // " tests failed"
0097	call(x=4,y=2,z=0)
0098	j(x=4)
0099	loadglobal(x=4,y=21)  // C()
0100	loadglobal(x=5,y=87)  // "all tests succeeded"
0101	call(x=4,y=1,z=0)
0102	leave(x=0)
- FILE (.\fib.test.lang):
INDEX INSTRUCTION
0000	loadglobal(x=0,y=33)  // C()
0001	loadint(x=1,y=8) #0
0002	call(x=0,y=1,z=0)
0003	newtable(x=0)
0004	setglobal(x=88,y=0)
0005	j(x=26)
0006	loadint(x=2,y=9) #2
0007	lt(x=1,y=0,z=2)
0008	jz(x=3,y=1)
0009	reload(x=1,y=0)
0010	yield(x=20,y=1,z=1)
0011	loadglobal(x=3,y=88)  // {1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565}
0012	getindex(x=2,y=3,z=0)
0013	loadnil(x=3,y=1)
0014	eq(x=1,y=2,z=3)
0015	jz(x=12,y=1)
0016	loadglobal(x=1,y=88)  // {1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565}
0017	loadglobal(x=3,y=89)  // F()
0018	loadint(x=5,y=10) #1
0019	sub(x=4,y=0,z=5)
0020	call(x=3,y=1,z=1)
0021	loadglobal(x=4,y=89)  // F()
0022	loadint(x=6,y=11) #2
0023	sub(x=5,y=0,z=6)
0024	call(x=4,y=1,z=1)
0025	add(x=2,y=3,z=4)
0026	setindex(x=1,y=0,z=2)
0027	loadglobal(x=2,y=88)  // {1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565}
0028	getindex(x=1,y=2,z=0)
0029	yield(x=1,y=1,z=1)
0030	leave(x=0)
0031	newclosure(x=0,y=1,z=0)
0032	setglobal(x=89,y=0)
0033	j(x=17)
0034	loadint(x=2,y=12) #2
0035	lt(x=1,y=0,z=2)
0036	jz(x=3,y=1)
0037	reload(x=1,y=0)
0038	yield(x=11,y=1,z=1)
0039	loadglobal(x=2,y=90)  // F()
0040	loadint(x=4,y=13) #1
0041	sub(x=3,y=0,z=4)
0042	call(x=2,y=1,z=1)
0043	loadglobal(x=3,y=90)  // F()
0044	loadint(x=5,y=14) #2
0045	sub(x=4,y=0,z=5)
0046	call(x=3,y=1,z=1)
0047	add(x=1,y=2,z=3)
0048	yield(x=1,y=1,z=1)
0049	leave(x=0)
0050	newclosure(x=0,y=2,z=0)
0051	setglobal(x=90,y=0)
0052	loadglobal(x=0,y=89)  // F()
0053	loadint(x=1,y=15) #0
0054	setglobal(x=82,y=1)
0055	j(x=23)
0056	loadcached(x=2,y=0)
0057	reload(x=3,y=0)
0058	call(x=2,y=1,z=1)
0059	loadglobal(x=4,y=82)  // 0
0060	loadnil(x=5,y=1)
0061	eq(x=3,y=4,z=5)
0062	jz(x=3,y=3)
0063	neq(x=3,y=2,z=1)
0064	setglobal(x=82,y=3)
0065	loadglobal(x=3,y=21)  // C()
0066	loadglobal(x=4,y=91)  // "fib("
0067	reload(x=5,y=0)
0068	loadglobal(x=6,y=92)  // ") => "
0069	reload(x=7,y=2)
0070	call(x=3,y=4,z=0)
0071	neq(x=3,y=2,z=1)
0072	jz(x=5,y=3)
0073	loadglobal(x=3,y=21)  // C()
0074	loadglobal(x=4,y=93)  // "	expected: "
0075	reload(x=5,y=1)
0076	call(x=3,y=2,z=0)
0077	leave(x=0)
0078	reload(x=1,y=0)
0079	newclosure(x=1,y=3,z=0)
0080	reload(x=2,y=1)
0081	loadint(x=3,y=16) #0
0082	loadint(x=4,y=17) #0
0083	call(x=2,y=2,z=0)
0084	reload(x=2,y=1)
0085	loadint(x=3,y=18) #1
0086	loadint(x=4,y=19) #1
0087	call(x=2,y=2,z=0)
0088	reload(x=2,y=1)
0089	loadint(x=3,y=20) #2
0090	loadint(x=4,y=21) #1
0091	call(x=2,y=2,z=0)
0092	reload(x=2,y=1)
0093	loadint(x=3,y=22) #3
0094	loadint(x=4,y=23) #2
0095	call(x=2,y=2,z=0)
0096	reload(x=2,y=1)
0097	loadint(x=3,y=24) #4
0098	loadint(x=4,y=25) #3
0099	call(x=2,y=2,z=0)
0100	reload(x=2,y=1)
0101	loadint(x=3,y=26) #10
0102	loadint(x=4,y=27) #55
0103	call(x=2,y=2,z=0)
0104	reload(x=2,y=1)
0105	loadint(x=3,y=28) #25
0106	loadint(x=4,y=29) #75025
0107	call(x=2,y=2,z=0)
0108	loadglobal(x=3,y=89)  // F()
0109	eq(x=2,y=0,z=3)
0110	jz(x=17,y=2)
0111	reload(x=2,y=1)
0112	loadint(x=3,y=30) #30
0113	loadint(x=4,y=31) #832040
0114	call(x=2,y=2,z=0)
0115	reload(x=2,y=1)
0116	loadint(x=3,y=32) #35
0117	loadint(x=4,y=33) #9227465
0118	call(x=2,y=2,z=0)
0119	reload(x=2,y=1)
0120	loadint(x=3,y=34) #40
0121	loadint(x=4,y=35) #102334155
0122	call(x=2,y=2,z=0)
0123	reload(x=2,y=1)
0124	loadint(x=3,y=36) #65
0125	loadint(x=4,y=37) #17167680177565
0126	call(x=2,y=2,z=0)
0127	loadglobal(x=2,y=82)  // 0
0128	jz(x=13,y=2)
0129	j(x=7)
0130	loadglobal(x=2,y=21)  // C()
0131	reload(x=3,y=0)
0132	loadglobal(x=4,y=94)  // " = "
0133	reload(x=5,y=1)
0134	call(x=2,y=3,z=0)
0135	leave(x=0)
0136	loadglobal(x=2,y=88)  // {1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565}
0137	loadglobal(x=4,y=95)  // "iter"
0138	metafield(x=3,y=2,z=4)
0139	newclosure(x=4,y=4,z=0)
0140	metacall(x=2,y=1,z=0)
0141	leave(x=0)
- FILE (.\finally.test.lang):
INDEX INSTRUCTION
0000	j(x=20)
0001	delay(x=4)
0002	loadglobal(x=0,y=97)  // "leave 4"
0003	yield(x=16,y=0,z=1)
0004	leave(x=0)
0005	delay(x=4)
0006	loadglobal(x=0,y=98)  // "leave 3"
0007	yield(x=12,y=0,z=1)
0008	leave(x=0)
0009	delay(x=4)
0010	loadglobal(x=0,y=99)  // "leave 2"
0011	yield(x=8,y=0,z=1)
0012	leave(x=0)
0013	delay(x=4)
0014	loadglobal(x=0,y=100)  // "leave 1"
0015	yield(x=4,y=0,z=1)
0016	leave(x=0)
0017	loadglobal(x=0,y=101)  // "leave 0"
0018	yield(x=1,y=0,z=1)
0019	leave(x=0)
0020	newclosure(x=0,y=5,z=0)
0021	setglobal(x=96,y=0)
0022	loadglobal(x=1,y=96)  // F()
0023	call(x=1,y=0,z=1)
0024	loadglobal(x=2,y=102)  // "leave 4"
0025	neq(x=0,y=1,z=2)
0026	setglobal(x=82,y=0)
0027	loadglobal(x=0,y=82)  // 0
0028	jz(x=4,y=0)
0029	loadglobal(x=0,y=21)  // C()
0030	loadglobal(x=1,y=103)  // "failed"
0031	call(x=0,y=1,z=0)
0032	loadglobal(x=0,y=82)  // 0
0033	yield(x=1,y=0,z=1)
0034	leave(x=0)
- FILE (.\for.test.lang):
INDEX INSTRUCTION
0000	loadglobal(x=0,y=33)  // C()
0001	loadint(x=1,y=38) #0
0002	call(x=0,y=1,z=0)
0003	loadint(x=1,y=39) #0
0004	loadint(x=2,y=40) #10
0005	lt(x=3,y=1,z=2)
0006	jz(x=5,y=3)
0007	reload(x=0,y=1)
0008	loadint(x=3,y=41) #1
0009	add(x=1,y=1,z=3)
0010	j(x=-6)
0011	loadint(x=2,y=42) #9
0012	neq(x=1,y=0,z=2)
0013	setglobal(x=82,y=1)
0014	leave(x=0)
- FILE (.\fun.test.lang):
INDEX INSTRUCTION
0000	loadint(x=0,y=43) #0
0001	setglobal(x=82,y=0)
0002	j(x=5)
0003	jnz(x=3,y=1)
0004	loadint(x=1,y=44) #1
0005	setglobal(x=82,y=1)
0006	leave(x=0)
0007	newclosure(x=0,y=6,z=0)
0008	setglobal(x=104,y=0)
0009	loadglobal(x=0,y=105)  // 1
0010	jz(x=4,y=0)
0011	loadglobal(x=0,y=21)  // C()
0012	loadglobal(x=1,y=106)  // "cannot conduct test"
0013	call(x=0,y=1,z=0)
0014	loadglobal(x=0,y=107)  // 1
0015	jz(x=4,y=0)
0016	loadglobal(x=0,y=21)  // C()
0017	loadglobal(x=1,y=108)  // "cannot conduct test"
0018	call(x=0,y=1,z=0)
0019	loadglobal(x=0,y=109)  // 1
0020	jz(x=4,y=0)
0021	loadglobal(x=0,y=21)  // C()
0022	loadglobal(x=1,y=110)  // "cannot conduct test"
0023	call(x=0,y=1,z=0)
0024	j(x=31)
0025	loadint(x=0,y=45) #1
0026	setglobal(x=105,y=0)
0027	j(x=25)
0028	loadint(x=0,y=46) #1
0029	setglobal(x=107,y=0)
0030	j(x=19)
0031	loadint(x=0,y=47) #1
0032	setglobal(x=109,y=0)
0033	loadglobal(x=0,y=104)  // F()
0034	loadglobal(x=2,y=105)  // 1
0035	loadint(x=3,y=48) #1
0036	eq(x=1,y=2,z=3)
0037	call(x=0,y=1,z=0)
0038	loadglobal(x=0,y=104)  // F()
0039	loadglobal(x=2,y=107)  // 1
0040	loadint(x=3,y=49) #1
0041	eq(x=1,y=2,z=3)
0042	call(x=0,y=1,z=0)
0043	loadglobal(x=0,y=104)  // F()
0044	loadglobal(x=2,y=109)  // 1
0045	loadint(x=3,y=50) #1
0046	eq(x=1,y=2,z=3)
0047	call(x=0,y=1,z=0)
0048	leave(x=0)
0049	newclosure(x=0,y=7,z=0)
0050	call(x=0,y=0,z=0)
0051	leave(x=0)
0052	newclosure(x=0,y=8,z=0)
0053	call(x=0,y=0,z=0)
0054	leave(x=0)
0055	newclosure(x=0,y=9,z=0)
0056	call(x=0,y=0,z=0)
0057	j(x=4)
0058	reload(x=1,y=0)
0059	call(x=1,y=0,z=0)
0060	leave(x=0)
0061	newclosure(x=0,y=10,z=0)
0062	setglobal(x=111,y=0)
0063	j(x=37)
0064	loadglobal(x=3,y=104)  // F()
0065	loadint(x=5,y=51) #1
0066	eq(x=4,y=0,z=5)
0067	call(x=3,y=1,z=0)
0068	loadglobal(x=3,y=104)  // F()
0069	loadint(x=5,y=52) #2
0070	eq(x=4,y=1,z=5)
0071	call(x=3,y=1,z=0)
0072	loadglobal(x=3,y=104)  // F()
0073	loadint(x=5,y=53) #3
0074	eq(x=4,y=2,z=5)
0075	call(x=3,y=1,z=0)
0076	j(x=17)
0077	loadglobal(x=0,y=104)  // F()
0078	loadcached(x=2,y=0)
0079	loadint(x=3,y=54) #1
0080	eq(x=1,y=2,z=3)
0081	call(x=0,y=1,z=0)
0082	loadglobal(x=0,y=104)  // F()
0083	loadcached(x=2,y=1)
0084	loadint(x=3,y=55) #2
0085	eq(x=1,y=2,z=3)
0086	call(x=0,y=1,z=0)
0087	loadglobal(x=0,y=104)  // F()
0088	loadcached(x=2,y=2)
0089	loadint(x=3,y=56) #3
0090	eq(x=1,y=2,z=3)
0091	call(x=0,y=1,z=0)
0092	leave(x=0)
0093	loadglobal(x=3,y=111)  // F()
0094	reload(x=4,y=0)
0095	reload(x=5,y=1)
0096	reload(x=6,y=2)
0097	newclosure(x=4,y=11,z=0)
0098	call(x=3,y=1,z=0)
0099	leave(x=0)
0100	newclosure(x=0,y=12,z=0)
0101	loadint(x=1,y=57) #1
0102	loadint(x=2,y=58) #2
0103	loadint(x=3,y=59) #3
0104	call(x=0,y=3,z=0)
0105	loadglobal(x=0,y=82)  // 0
0106	yield(x=1,y=0,z=1)
0107	leave(x=0)
- FILE (.\fun1.test.lang):
INDEX INSTRUCTION
0000	loadint(x=0,y=60) #1
0001	setglobal(x=82,y=0)
0002	j(x=16)
0003	j(x=12)
0004	j(x=8)
0005	j(x=4)
0006	loadint(x=0,y=61) #0
0007	setglobal(x=82,y=0)
0008	leave(x=0)
0009	newclosure(x=0,y=13,z=0)
0010	yield(x=1,y=0,z=1)
0011	leave(x=0)
0012	newclosure(x=0,y=14,z=0)
0013	yield(x=1,y=0,z=1)
0014	leave(x=0)
0015	newclosure(x=0,y=15,z=0)
0016	yield(x=1,y=0,z=1)
0017	leave(x=0)
0018	newclosure(x=0,y=16,z=0)
0019	call(x=0,y=0,z=1)
0020	call(x=0,y=0,z=1)
0021	call(x=0,y=0,z=1)
0022	call(x=0,y=0,z=0)
0023	loadglobal(x=0,y=82)  // 0
0024	jz(x=5,y=0)
0025	loadglobal(x=0,y=21)  // C()
0026	loadglobal(x=1,y=112)  // "failed"
0027	call(x=0,y=1,z=0)
0028	j(x=4)
0029	loadglobal(x=0,y=21)  // C()
0030	loadglobal(x=1,y=113)  // "success"
0031	call(x=0,y=1,z=0)
0032	leave(x=0)
- FILE (.\if.test.lang):
INDEX INSTRUCTION
0000	loadglobal(x=0,y=33)  // C()
0001	loadint(x=1,y=62) #0
0002	call(x=0,y=1,z=0)
0003	loadint(x=0,y=63) #0
0004	jz(x=3,y=0)
0005	loadint(x=0,y=64) #1
0006	setglobal(x=82,y=0)
0007	loadint(x=0,y=65) #1
0008	jnz(x=3,y=0)
0009	loadint(x=0,y=66) #1
0010	setglobal(x=82,y=0)
0011	j(x=13)
0012	loadglobal(x=3,y=82)  // 0
0013	loadnil(x=4,y=1)
0014	eq(x=2,y=3,z=4)
0015	jz(x=3,y=2)
0016	neq(x=2,y=0,z=1)
0017	setglobal(x=82,y=2)
0018	neq(x=2,y=0,z=1)
0019	jz(x=4,y=2)
0020	loadglobal(x=2,y=21)  // C()
0021	loadglobal(x=3,y=114)  // "failed"
0022	call(x=2,y=1,z=0)
0023	leave(x=0)
0024	newclosure(x=0,y=17,z=0)
0025	reload(x=1,y=0)
0026	loadint(x=3,y=67) #0
0027	loadint(x=4,y=68) #1
0028	lteq(x=2,y=3,z=4)
0029	loadint(x=3,y=69) #1
0030	call(x=1,y=2,z=0)
0031	reload(x=1,y=0)
0032	loadint(x=3,y=70) #0
0033	loadint(x=4,y=71) #1
0034	lteq(x=2,y=3,z=4)
0035	loadint(x=3,y=72) #1
0036	call(x=1,y=2,z=0)
0037	reload(x=1,y=0)
0038	loadint(x=3,y=73) #1
0039	loadint(x=4,y=74) #1
0040	lteq(x=2,y=3,z=4)
0041	loadint(x=3,y=75) #1
0042	call(x=1,y=2,z=0)
0043	reload(x=1,y=0)
0044	loadint(x=3,y=76) #0
0045	loadint(x=4,y=77) #0
0046	lteq(x=2,y=3,z=4)
0047	loadint(x=3,y=78) #1
0048	call(x=1,y=2,z=0)
0049	reload(x=1,y=0)
0050	loadint(x=3,y=79) #1
0051	loadint(x=4,y=80) #1
0052	lteq(x=2,y=3,z=4)
0053	loadint(x=3,y=81) #1
0054	call(x=1,y=2,z=0)
0055	reload(x=1,y=0)
0056	loadint(x=3,y=82) #0
0057	loadint(x=4,y=83) #1
0058	lteq(x=2,y=3,z=4)
0059	loadint(x=3,y=84) #1
0060	call(x=1,y=2,z=0)
0061	reload(x=1,y=0)
0062	loadint(x=3,y=85) #0
0063	jz(x=9,y=3)
0064	loadint(x=3,y=86) #0
0065	jz(x=7,y=3)
0066	loadint(x=3,y=87) #0
0067	jz(x=5,y=3)
0068	loadint(x=3,y=88) #0
0069	jz(x=3,y=3)
0070	loadint(x=2,y=89) #1
0071	j(x=2)
0072	loadint(x=2,y=90) #0
0073	loadint(x=3,y=91) #0
0074	call(x=1,y=2,z=0)
0075	reload(x=1,y=0)
0076	loadint(x=3,y=92) #0
0077	jnz(x=7,y=3)
0078	loadint(x=3,y=93) #0
0079	jnz(x=5,y=3)
0080	loadint(x=3,y=94) #0
0081	jnz(x=3,y=3)
0082	loadint(x=3,y=95) #0
0083	jz(x=3,y=3)
0084	loadint(x=2,y=96) #1
0085	j(x=2)
0086	loadint(x=2,y=97) #0
0087	loadint(x=3,y=98) #0
0088	call(x=1,y=2,z=0)
0089	reload(x=1,y=0)
0090	loadint(x=3,y=99) #0
0091	jz(x=3,y=3)
0092	loadint(x=3,y=100) #0
0093	jnz(x=3,y=3)
0094	loadint(x=3,y=101) #0
0095	jz(x=3,y=3)
0096	loadint(x=2,y=102) #1
0097	j(x=2)
0098	loadint(x=2,y=103) #0
0099	loadint(x=3,y=104) #0
0100	call(x=1,y=2,z=0)
0101	reload(x=1,y=0)
0102	loadint(x=3,y=105) #0
0103	jz(x=3,y=3)
0104	loadint(x=3,y=106) #0
0105	jnz(x=3,y=3)
0106	loadint(x=3,y=107) #1
0107	jz(x=3,y=3)
0108	loadint(x=2,y=108) #1
0109	j(x=2)
0110	loadint(x=2,y=109) #0
0111	loadint(x=3,y=110) #1
0112	call(x=1,y=2,z=0)
0113	reload(x=1,y=0)
0114	loadint(x=3,y=111) #0
0115	jz(x=3,y=3)
0116	loadint(x=3,y=112) #1
0117	jnz(x=3,y=3)
0118	loadint(x=3,y=113) #2
0119	jz(x=3,y=3)
0120	loadint(x=2,y=114) #1
0121	j(x=2)
0122	loadint(x=2,y=115) #0
0123	loadint(x=3,y=116) #1
0124	call(x=1,y=2,z=0)
0125	reload(x=1,y=0)
0126	loadint(x=3,y=117) #0
0127	jz(x=5,y=3)
0128	loadint(x=3,y=118) #0
0129	jz(x=3,y=3)
0130	loadint(x=2,y=119) #1
0131	j(x=2)
0132	loadint(x=2,y=120) #0
0133	loadint(x=3,y=121) #0
0134	call(x=1,y=2,z=0)
0135	reload(x=1,y=0)
0136	loadint(x=3,y=122) #0
0137	jz(x=5,y=3)
0138	loadint(x=3,y=123) #1
0139	jz(x=3,y=3)
0140	loadint(x=2,y=124) #1
0141	j(x=2)
0142	loadint(x=2,y=125) #0
0143	loadint(x=3,y=126) #0
0144	call(x=1,y=2,z=0)
0145	reload(x=1,y=0)
0146	loadint(x=3,y=127) #1
0147	jz(x=5,y=3)
0148	loadint(x=3,y=128) #1
0149	jz(x=3,y=3)
0150	loadint(x=2,y=129) #1
0151	j(x=2)
0152	loadint(x=2,y=130) #0
0153	loadint(x=3,y=131) #1
0154	call(x=1,y=2,z=0)
0155	reload(x=1,y=0)
0156	loadint(x=3,y=132) #0
0157	jnz(x=3,y=3)
0158	loadint(x=3,y=133) #0
0159	jz(x=3,y=3)
0160	loadint(x=2,y=134) #1
0161	j(x=2)
0162	loadint(x=2,y=135) #0
0163	loadint(x=3,y=136) #0
0164	call(x=1,y=2,z=0)
0165	reload(x=1,y=0)
0166	loadint(x=3,y=137) #0
0167	jnz(x=3,y=3)
0168	loadint(x=3,y=138) #1
0169	jz(x=3,y=3)
0170	loadint(x=2,y=139) #1
0171	j(x=2)
0172	loadint(x=2,y=140) #0
0173	loadint(x=3,y=141) #1
0174	call(x=1,y=2,z=0)
0175	reload(x=1,y=0)
0176	loadint(x=3,y=142) #1
0177	jnz(x=3,y=3)
0178	loadint(x=3,y=143) #1
0179	jz(x=3,y=3)
0180	loadint(x=2,y=144) #1
0181	j(x=2)
0182	loadint(x=2,y=145) #0
0183	loadint(x=3,y=146) #1
0184	call(x=1,y=2,z=0)
0185	reload(x=1,y=0)
0186	loadint(x=3,y=147) #0
0187	jz(x=3,y=3)
0188	loadint(x=3,y=148) #0
0189	jnz(x=3,y=3)
0190	loadint(x=3,y=149) #0
0191	jz(x=3,y=3)
0192	loadint(x=2,y=150) #1
0193	j(x=2)
0194	loadint(x=2,y=151) #0
0195	loadint(x=3,y=152) #0
0196	call(x=1,y=2,z=0)
0197	loadint(x=1,y=153) #0
0198	loadint(x=2,y=154) #4
0199	lt(x=3,y=1,z=2)
0200	jz(x=36,y=3)
0201	loadint(x=4,y=155) #0
0202	eq(x=3,y=1,z=4)
0203	jz(x=7,y=3)
0204	reload(x=3,y=0)
0205	loadint(x=5,y=156) #0
0206	eq(x=4,y=1,z=5)
0207	loadint(x=5,y=157) #1
0208	call(x=3,y=2,z=0)
0209	j(x=24)
0210	loadint(x=4,y=158) #1
0211	eq(x=3,y=1,z=4)
0212	jz(x=7,y=3)
0213	reload(x=3,y=0)
0214	loadint(x=5,y=159) #1
0215	eq(x=4,y=1,z=5)
0216	loadint(x=5,y=160) #1
0217	call(x=3,y=2,z=0)
0218	j(x=15)
0219	loadint(x=4,y=161) #2
0220	eq(x=3,y=1,z=4)
0221	jz(x=7,y=3)
0222	reload(x=3,y=0)
0223	loadint(x=5,y=162) #2
0224	eq(x=4,y=1,z=5)
0225	loadint(x=5,y=163) #1
0226	call(x=3,y=2,z=0)
0227	j(x=6)
0228	reload(x=3,y=0)
0229	loadint(x=5,y=164) #3
0230	lteq(x=4,y=5,z=1)
0231	loadint(x=5,y=165) #1
0232	call(x=3,y=2,z=0)
0233	loadint(x=3,y=166) #1
0234	add(x=1,y=1,z=3)
0235	j(x=-37)
0236	loadglobal(x=1,y=82)  // 0
0237	jz(x=4,y=1)
0238	loadglobal(x=1,y=21)  // C()
0239	loadglobal(x=2,y=115)  // "failed"
0240	call(x=1,y=1,z=0)
0241	loadglobal(x=1,y=82)  // 0
0242	yield(x=1,y=1,z=1)
0243	leave(x=0)
- FILE (.\match.test.lang):
INDEX INSTRUCTION
0000	loadint(x=0,y=167) #0
0001	setglobal(x=82,y=0)
0002	j(x=11)
0003	neq(x=2,y=0,z=1)
0004	jz(x=4,y=2)
0005	loadglobal(x=2,y=21)  // C()
0006	loadglobal(x=3,y=116)  // "failed"
0007	call(x=2,y=1,z=0)
0008	neq(x=2,y=0,z=1)
0009	jz(x=3,y=2)
0010	loadint(x=2,y=168) #1
0011	setglobal(x=82,y=2)
0012	leave(x=0)
0013	newclosure(x=0,y=18,z=0)
0014	reload(x=1,y=0)
0015	loadglobal(x=2,y=117)  // ""
0016	loadglobal(x=4,y=118)  // "match"
0017	metafield(x=3,y=2,z=4)
0018	loadglobal(x=4,y=119)  // "*"
0019	metacall(x=2,y=1,z=1)
0020	loadint(x=3,y=169) #1
0021	call(x=1,y=2,z=0)
0022	reload(x=1,y=0)
0023	loadglobal(x=2,y=120)  // ""
0024	loadglobal(x=4,y=121)  // "match"
0025	metafield(x=3,y=2,z=4)
0026	loadglobal(x=4,y=122)  // "?"
0027	metacall(x=2,y=1,z=1)
0028	loadint(x=3,y=170) #0
0029	call(x=1,y=2,z=0)
0030	reload(x=1,y=0)
0031	loadglobal(x=2,y=123)  // "file.obj"
0032	loadglobal(x=4,y=124)  // "match"
0033	metafield(x=3,y=2,z=4)
0034	loadglobal(x=4,y=125)  // "*.obj|*.dll"
0035	metacall(x=2,y=1,z=1)
0036	loadint(x=3,y=171) #1
0037	call(x=1,y=2,z=0)
0038	reload(x=1,y=0)
0039	loadglobal(x=2,y=126)  // "file.dll"
0040	loadglobal(x=4,y=127)  // "match"
0041	metafield(x=3,y=2,z=4)
0042	loadglobal(x=4,y=128)  // "*.obj|*.dll"
0043	metacall(x=2,y=1,z=1)
0044	loadint(x=3,y=172) #1
0045	call(x=1,y=2,z=0)
0046	reload(x=1,y=0)
0047	loadglobal(x=2,y=129)  // "xxxyyyzzz"
0048	loadglobal(x=4,y=130)  // "match"
0049	metafield(x=3,y=2,z=4)
0050	loadglobal(x=4,y=131)  // "xxx*www"
0051	metacall(x=2,y=1,z=1)
0052	loadint(x=3,y=173) #0
0053	call(x=1,y=2,z=0)
0054	reload(x=1,y=0)
0055	loadglobal(x=2,y=132)  // "x.x"
0056	loadglobal(x=4,y=133)  // "match"
0057	metafield(x=3,y=2,z=4)
0058	loadglobal(x=4,y=134)  // "x?x"
0059	metacall(x=2,y=1,z=1)
0060	loadint(x=3,y=174) #1
0061	call(x=1,y=2,z=0)
0062	reload(x=1,y=0)
0063	loadglobal(x=2,y=135)  // ".x."
0064	loadglobal(x=4,y=136)  // "match"
0065	metafield(x=3,y=2,z=4)
0066	loadglobal(x=4,y=137)  // "?x?"
0067	metacall(x=2,y=1,z=1)
0068	loadint(x=3,y=175) #1
0069	call(x=1,y=2,z=0)
0070	reload(x=1,y=0)
0071	loadglobal(x=2,y=138)  // ".x."
0072	loadglobal(x=4,y=139)  // "match"
0073	metafield(x=3,y=2,z=4)
0074	loadglobal(x=4,y=140)  // "?y?"
0075	metacall(x=2,y=1,z=1)
0076	loadint(x=3,y=176) #0
0077	call(x=1,y=2,z=0)
0078	reload(x=1,y=0)
0079	loadglobal(x=2,y=141)  // "x.x"
0080	loadglobal(x=4,y=142)  // "match"
0081	metafield(x=3,y=2,z=4)
0082	loadglobal(x=4,y=143)  // "*x"
0083	metacall(x=2,y=1,z=1)
0084	loadint(x=3,y=177) #1
0085	call(x=1,y=2,z=0)
0086	reload(x=1,y=0)
0087	loadglobal(x=2,y=144)  // "x.x"
0088	loadglobal(x=4,y=145)  // "match"
0089	metafield(x=3,y=2,z=4)
0090	loadglobal(x=4,y=146)  // "x*"
0091	metacall(x=2,y=1,z=1)
0092	loadint(x=3,y=178) #1
0093	call(x=1,y=2,z=0)
0094	reload(x=1,y=0)
0095	loadglobal(x=2,y=147)  // "x.x"
0096	loadglobal(x=4,y=148)  // "match"
0097	metafield(x=3,y=2,z=4)
0098	loadglobal(x=4,y=149)  // "x*x"
0099	metacall(x=2,y=1,z=1)
0100	loadint(x=3,y=179) #1
0101	call(x=1,y=2,z=0)
0102	loadglobal(x=1,y=82)  // 0
0103	yield(x=1,y=1,z=1)
0104	leave(x=0)
- FILE (.\meta.test.lang):
INDEX INSTRUCTION
0000	newtable(x=0)
0001	loadint(x=1,y=180) #0
0002	loadint(x=2,y=181) #1
0003	setindex(x=0,y=1,z=2)
0004	loadint(x=1,y=182) #1
0005	loadint(x=2,y=183) #2
0006	setindex(x=0,y=1,z=2)
0007	loadint(x=1,y=184) #2
0008	loadint(x=2,y=185) #3
0009	setindex(x=0,y=1,z=2)
0010	loadglobal(x=2,y=150)  // "length"
0011	metafield(x=1,y=0,z=2)
0012	metacall(x=0,y=0,z=1)
0013	loadint(x=2,y=186) #3
0014	neq(x=1,y=0,z=2)
0015	setglobal(x=82,y=1)
0016	leave(x=0)
- FILE (.\stack.test.lang):
INDEX INSTRUCTION
0000	loadint(x=0,y=187) #0
0001	setglobal(x=82,y=0)
0002	j(x=16)
0003	loadglobal(x=3,y=82)  // 0
0004	loadnil(x=4,y=1)
0005	eq(x=2,y=3,z=4)
0006	jz(x=3,y=2)
0007	neq(x=2,y=0,z=1)
0008	setglobal(x=82,y=2)
0009	neq(x=2,y=0,z=1)
0010	jz(x=7,y=2)
0011	loadglobal(x=2,y=21)  // C()
0012	loadglobal(x=3,y=151)  // "failed, expected "
0013	reload(x=4,y=1)
0014	loadglobal(x=5,y=152)  // ", instead got "
0015	reload(x=6,y=0)
0016	call(x=2,y=4,z=0)
0017	leave(x=0)
0018	newclosure(x=0,y=19,z=0)
0019	j(x=32)
0020	loadcached(x=3,y=0)
0021	loadint(x=4,y=188) #0
0022	stkget(x=4,y=4)
0023	loadglobal(x=5,y=154)  // "x"
0024	call(x=3,y=2,z=0)
0025	loadcached(x=3,y=0)
0026	loadint(x=4,y=189) #1
0027	stkget(x=4,y=4)
0028	loadglobal(x=5,y=155)  // "y"
0029	call(x=3,y=2,z=0)
0030	loadcached(x=3,y=0)
0031	loadint(x=4,y=190) #2
0032	stkget(x=4,y=4)
0033	loadglobal(x=5,y=156)  // "z"
0034	call(x=3,y=2,z=0)
0035	loadcached(x=3,y=0)
0036	loadint(x=4,y=191) #3
0037	stkget(x=4,y=4)
0038	loadint(x=5,y=192) #1
0039	call(x=3,y=2,z=0)
0040	loadcached(x=3,y=0)
0041	loadint(x=4,y=193) #4
0042	stkget(x=4,y=4)
0043	loadint(x=5,y=194) #2
0044	call(x=3,y=2,z=0)
0045	loadcached(x=3,y=0)
0046	loadint(x=4,y=195) #5
0047	stkget(x=4,y=4)
0048	loadint(x=5,y=196) #3
0049	call(x=3,y=2,z=0)
0050	leave(x=0)
0051	reload(x=1,y=0)
0052	newclosure(x=1,y=20,z=0)
0053	setglobal(x=153,y=1)
0054	loadglobal(x=1,y=153)  // F()
0055	loadglobal(x=2,y=157)  // "x"
0056	loadglobal(x=3,y=158)  // "y"
0057	loadglobal(x=4,y=159)  // "z"
0058	loadint(x=5,y=197) #1
0059	loadint(x=6,y=198) #2
0060	loadint(x=7,y=199) #3
0061	call(x=1,y=6,z=0)
0062	loadglobal(x=1,y=82)  // 0
0063	yield(x=1,y=1,z=1)
0064	leave(x=0)
- FILE (.\unload.test.lang):
INDEX INSTRUCTION
0000	loadglobal(x=0,y=19)  // C()
0001	call(x=0,y=0,z=1)
0002	delay(x=5)
0003	loadglobal(x=1,y=58)  // C()
0004	reload(x=2,y=0)
0005	call(x=1,y=1,z=0)
0006	leave(x=0)
0007	newtable(x=1)
0008	loadglobal(x=2,y=160)  // "x"
0009	loadint(x=3,y=200) #1
0010	setfield(x=1,y=2,z=3)
0011	loadglobal(x=2,y=161)  // "y"
0012	newtable(x=3)
0013	loadglobal(x=4,y=162)  // "x"
0014	loadint(x=5,y=201) #1
0015	setfield(x=3,y=4,z=5)
0016	loadglobal(x=4,y=163)  // "y"
0017	loadint(x=5,y=202) #2
0018	setfield(x=3,y=4,z=5)
0019	setfield(x=1,y=2,z=3)
0020	reload(x=2,y=1)
0021	loadglobal(x=4,y=164)  // "unload"
0022	metafield(x=3,y=2,z=4)
0023	reload(x=4,y=0)
0024	metacall(x=2,y=1,z=0)
0025	loadglobal(x=2,y=21)  // C()
0026	loadglobal(x=3,y=165)  // "size: "
0027	loadglobal(x=4,y=59)  // C()
0028	reload(x=5,y=0)
0029	call(x=4,y=1,z=1)
0030	call(x=2,y=2,z=0)
0031	loadglobal(x=2,y=18)  // C()
0032	reload(x=3,y=0)
0033	call(x=2,y=1,z=1)
0034	loadglobal(x=3,y=21)  // C()
0035	loadglobal(x=4,y=166)  // "data: "
0036	reload(x=5,y=2)
0037	call(x=3,y=2,z=0)
0038	loadglobal(x=3,y=14)  // C()
0039	reload(x=4,y=2)
0040	call(x=3,y=1,z=1)
0041	loadglobal(x=4,y=21)  // C()
0042	reload(x=5,y=3)
0043	call(x=4,y=1,z=0)
0044	leave(x=0)
- FILE ((null)):
INDEX INSTRUCTION
0000	newtable(x=0)
0001	loadglobal(x=1,y=167)  // "y"
0002	newtable(x=2)
0003	loadglobal(x=3,y=168)  // "y"
0004	loadint(x=4,y=203) #2
0005	setfield(x=2,y=3,z=4)
0006	loadglobal(x=3,y=169)  // "x"
0007	loadint(x=4,y=204) #1
0008	setfield(x=2,y=3,z=4)
0009	setfield(x=0,y=1,z=2)
0010	loadglobal(x=1,y=170)  // "x"
0011	loadint(x=2,y=205) #1
0012	setfield(x=0,y=1,z=2)
0013	yield(x=1,y=0,z=1)
0014	leave(x=0)
test scores:
end of test run{"y" = {"y" = 2,"x" = 1},"x" = 1}let file = ftemp() finally fclose(file)
let test = {"x"=1,"y"={
	"x"=1,
	"y"=2,
}}
test:unload(file)
pf("size: ",fsize(file));
let data = freadall(file)
pf("data: ",data);
let x = loadexpr(data)
pf(x)
-- BYTECODE --
- FILE (code\tests\unload.test.lang):
INDEX INSTRUCTION
0000	loadglobal(x=0,y=15)  // C()
0001	call(x=0,y=0,z=1)
0002	delay(x=5)
0003	loadglobal(x=1,y=17)  // C()
0004	reload(x=2,y=0)
0005	call(x=1,y=1,z=0)
0006	leave(x=0)
0007	newtable(x=1)
0008	loadglobal(x=2,y=56)  // "x"
0009	loadint(x=3,y=0) #1
0010	setfield(x=1,y=2,z=3)
0011	loadglobal(x=4,y=57)  // "y"
0012	newtable(x=5)
0013	loadglobal(x=6,y=58)  // "x"
0014	loadint(x=7,y=1) #1
0015	setfield(x=5,y=6,z=7)
0016	loadglobal(x=8,y=59)  // "y"
0017	loadint(x=9,y=2) #2
0018	setfield(x=5,y=8,z=9)
0019	setfield(x=1,y=4,z=5)
0020	reload(x=2,y=1)
0021	loadglobal(x=4,y=60)  // "unload"
0022	metaname(x=3,y=2,z=4)
0023	reload(x=4,y=0)
0024	metacall(x=2,y=1,z=0)
0025	loadglobal(x=2,y=20)  // C()
0026	loadglobal(x=3,y=61)  // "size: "
0027	loadglobal(x=4,y=18)  // C()
0028	reload(x=5,y=0)
0029	call(x=4,y=1,z=1)
0030	call(x=2,y=2,z=0)
0031	loadglobal(x=2,y=14)  // C()
0032	reload(x=3,y=0)
0033	call(x=2,y=1,z=1)
0034	loadglobal(x=3,y=20)  // C()
0035	loadglobal(x=4,y=62)  // "data: "
0036	reload(x=5,y=2)
0037	call(x=3,y=2,z=0)
0038	loadglobal(x=3,y=10)  // C()
0039	reload(x=4,y=2)
0040	call(x=3,y=1,z=1)
0041	loadglobal(x=4,y=20)  // C()
0042	reload(x=5,y=3)
0043	call(x=4,y=1,z=0)
0044	leave(x=0)
- FILE ((null)):
INDEX INSTRUCTION
0000	newtable(x=0)
0001	loadglobal(x=1,y=63)  // "y"
0002	newtable(x=2)
0003	loadglobal(x=3,y=64)  // "y"
0004	loadint(x=4,y=3) #2
0005	setfield(x=2,y=3,z=4)
0006	loadglobal(x=5,y=65)  // "x"
0007	loadint(x=6,y=4) #1
0008	setfield(x=2,y=5,z=6)
0009	setfield(x=0,y=1,z=2)
0010	loadglobal(x=3,y=66)  // "x"
0011	loadint(x=4,y=5) #1
0012	setfield(x=0,y=3,z=4)
0013	yield(x=1,y=0,z=1)
0014	leave(x=0)
