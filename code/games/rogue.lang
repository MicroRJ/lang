__logging(false)
load "code/games/lgi.lang"

// let enum {
// 	TILESET_ROWLEN =  10,
// 	TILE_SLOTDIMEN =  18,
// 	TILE_DRAWDIMEN = 128,
// }

let enum {
	TILESET_ROWLEN =  11,
	TILE_SLOTDIMEN =  32,
	TILE_DRAWDIMEN = 128,
	/* todo: rename these */
	ISO_YTILT = TILE_DRAWDIMEN * .50,
	ISO_XTILT = TILE_DRAWDIMEN * .25,
}

let Feet = {}
let World = {}
let WorldSide = 16
let WorldSize = WorldSide*WorldSide*WorldSide
camerax = 0
cameray = 0
critterx = 0
crittery = 0



// let enum {
// 	GRASS  = 0,
// 	DIRT   = 6,
// 	AIR    = 9,
// 	WATER  = 23,
// 	OAK    = 30,
// 	LEAF   = 40,
// }

let enum {
	DIRT   = 0,
	GRASS  = 23,
	AIR    = 9,
	WATER  = 23,
	OAK    = 30,
	LEAF   = 40,
}


let enum xorshift = fun(x) ? {
	x = x ^ x << 13
	x = x ^ x >> 7
	x = x ^ x << 17
	leave x
}

rndstate = 5282
let enum rnd = fun(x,y) ? {
	rndstate = xorshift(rndstate)
	if rndstate < 0 ? rndstate = -rndstate
	leave x + rndstate % (y - x)
}


World[0..WorldSize] = AIR
for i in 0..WorldSide*WorldSide ? {
	World[i] = rnd(DIRT,9)
}
for i in 0..WorldSide*WorldSide ? {
	World[rnd(0,WorldSide*WorldSide)] = rnd(GRASS,GRASS+2)
}


let gettileid = fun(x,y,z) ? {
	leave World[WorldSide*WorldSide*z + WorldSide * y + x]
}


let settileid = fun(tileid,x,y,z) ? {
	World[WorldSide*WorldSide*z + WorldSide * y + x] = tileid
}


let addtree = fun(x,y) ? {
	settileid(OAK,x,y,1)
	settileid(OAK,x,y,2)
	settileid(LEAF,x,y,3)
	settileid(LEAF,x,y,4)
	settileid(LEAF,x+1,y,3)
	settileid(LEAF,x-1,y,3)
	settileid(LEAF,x,y+1,3)
	settileid(LEAF,x,y-1,3)
}
// addtree(1,1)


let enum vec2 = fun(x,y) ? ({"x"=x,"y"=y})
let enum vec2_add = fun(x,y) ? vec2(x.x+y.x,x.y+y.y)

let enum {
	LEFT  = vec2(-1, 0),
	RIGHT = vec2( 1, 0),
	UP    = vec2( 0, 1),
	DOWN  = vec2( 0,-1),
}


lgi_initWindowed(720,720, "rogue")

/* make it so that we change the default
sampler */
let tilestex = lgi_loadtexture("code/games/tiles2.png")
lgi_setsampler(tilestex,"point")
let crittertex = lgi_loadtexture("code/games/critter_stag_NE_idle.png")
lgi_setsampler(crittertex,"point")
let wolftex = lgi_loadtexture("code/games/wolf-idle.png")
lgi_setsampler(wolftex,"point")

let enum toscreenx = fun(x,y,z) ? {
	leave (x - y) * ISO_YTILT - camerax
}
let enum toscreeny = fun(x,y,z) ? {
	leave (x + y) * ISO_XTILT + z*ISO_YTILT - cameray
}

let enum isotoworld = fun(x,y) ? {
	let xworld = (x + y + camerax) / (ISO_YTILT)
	let yworld = (y - x + cameray) / (ISO_XTILT)
	// pf("(", x, ", ", y, ") = ", "(", xworld, ", ", yworld, ")")
	leave vec2(xworld,yworld)
}


let lerp = fun(x,y,z) ? (y + x * (z - y))
let unlerp = fun(x,y,z) ? ((x - y) / (z - y))
let map = fun(x,y,z,w,v) ? lerp(unlerp(x,y,z),w,v)


let enum plotline = fun(x0,y0,x1,y1) ? {
	// x0 = iton(x0)
	// y0 = iton(y0)
	// x1 = iton(x1)
	// y1 = iton(y1)
	// let d = unlerp(sin(lgi_time()*.1*3.14),-1,1)
	let xskew = .50 // lerp(d,.25,.50)
	let yskew = .25 // lerp(d,.50,.25)
	let o = 1. // lerp(d,0.,1.)
	let i = 1. // - o
	let ix0 = (x0*i - y0*o) * TILE_DRAWDIMEN * xskew - camerax
	let iy0 = (x0*o + y0*i) * TILE_DRAWDIMEN * yskew - cameray
	let ix1 = (x1*i - y1*o) * TILE_DRAWDIMEN * xskew - camerax
	let iy1 = (x1*o + y1*i) * TILE_DRAWDIMEN * yskew - cameray
	lgi_drawline(lgi_BLUE,1,ix0,iy0,ix1,iy1)
}


let enum plotgrid = fun() ? {
	for i in 0..16 ? {
		plotline(0,i,16,i)
		plotline(i,0,i,16)
	}
}


let plottile = fun(tileid,x,y,z) ? {
	let screenx = (x - y) * ISO_YTILT - camerax
	let screeny = (x + y) * ISO_XTILT + z*ISO_YTILT - cameray
	lgi_drawtexture(tilestex,screenx,screeny
	,TILE_DRAWDIMEN,TILE_DRAWDIMEN
	,TILE_SLOTDIMEN*(tileid%TILESET_ROWLEN)
	,TILE_SLOTDIMEN*(tileid/TILESET_ROWLEN)
	,TILE_SLOTDIMEN,TILE_SLOTDIMEN)
}


let drawcritter = fun(x,y) ? {
	let z = 0
	let isox = toscreenx(x,y,0)
	let isoy = toscreeny(x,y,0)
	let xanim = (lgi_time() / .256) % 26
	let w = 32 / 1.
	let h = 41 / 1.
	let a = h / w
	let s = 128
	lgi_drawtexture(crittertex,isox,isoy,s,s*a,32*xanim,0,32,41)
}


let drawwolf = fun(x,y) ? {
	let z = 0
	let isox = toscreenx(x,y,0)
	let isoy = toscreeny(x,y,0)
	let xanim = (lgi_time() / .256) % 26
	let w = 64.
	let h = 64.
	let a = h / w
	let s = 256
	lgi_drawtexture(wolftex,isox,isoy,s,s*a,64*xanim,64*3,64,64)
}


let move = fun(x) ? {
	// camerax = camerax + -x.x * 10
	// cameray = cameray + -x.y * 10
	critterx = critterx + x.x
	crittery = crittery + x.y
}




do {
	let xcursor = lgi_getcursorx()
	let ycursor = lgi_getcursory()
	let wcursor = isotoworld(xcursor,ycursor)

	lgi_clearBackground();

	if 0 ? {
		if lgi_testKey('W') ? move(UP)
		if lgi_testKey('D') ? move(RIGHT)
		if lgi_testKey('A') ? move(LEFT)
		if lgi_testKey('S') ? move(DOWN)
	} else {
		if lgi_testKey('W') ? move(RIGHT)
		if lgi_testKey('D') ? move(DOWN)
		if lgi_testKey('A') ? move(UP)
		if lgi_testKey('S') ? move(LEFT)
	}

	for z in 0..8 ? {
		for y in 0..8 ? {
			let iy = 8-1-y
			for x in 0..8 ? {
				let ix = 8-1-x
				let tileid = gettileid(ix,iy,z)
				if tileid != AIR ? {
					plottile(tileid,ix,iy,z)
				}
			}
		}
	}

	plotgrid()

	stagx ?= rnd(0,8)
	stagy ?= rnd(0,8)
	drawcritter(stagx,stagy)
	drawwolf(critterx,crittery)


	let wcursorx = ((ycursor/.25) + (xcursor/.50)) / (TILE_DRAWDIMEN*2)
	let wcursory = ((ycursor/.25) - (xcursor/.50)) / (TILE_DRAWDIMEN*2)
	pf(wcursorx, ", ", wcursory)
} while lgi_tick()





