
// Example:
// lgi_initWindowed(720,720,"test")
// do { lgi_clearBackground();
// } while lgi_tick()


log ?= pf

let enum _time = clocktime()
finally log(" loaded lgi, took: ",timediffs(_time))

lgi ?= {}
lgi.lib ?= loadlib("build/lgilib.exe")

let enum lgilib = lgi.lib
let lgifn = fun(name) ? libfn(lgilib,name)

lgi_initWindowed = lgifn("lgilib_initWindowed")
lgi_tick = lgifn("lgilib_tick")
lgi_clearBackground = lgifn("lgilib_clearBackground")

lgi_testKey = lgifn("lgilib_testKey")
lgi_wasbuttondown = lgifn("lgilib_wasButtonDown")
lgi_isbuttondown = lgifn("lgilib_isButtonDown")
lgi_isbuttonreleased = lgifn("lgilib_isButtonReleased")
lgi_isclick = lgifn("lgilib_isButtonPressed")

lgi_deltatime = lgifn("lgilib_deltatime")
lgi_getcursorx = lgifn("lgilib_getcursorx")
lgi_getcursory = lgifn("lgilib_getcursory")

lgi_drawline_ = lgifn("lgilib_drawline")
lgi_drawQuad_ = lgifn("lgilib_drawQuad")
lgi_drawQuadUV_ = lgifn("lgilib_drawQuadUV")
lgi_time = lgifn("lgilib_time")

lgi_getSizeX = lgifn("lgilib_getSizeX")
lgi_getSizeY = lgifn("lgilib_getSizeY")

lgi_getwindowwidth = lgi_getSizeX
lgi_getwindowheight = lgi_getSizeY


lgi_loadtexture = lgifn("lgilib_loadtexture")
lgi_gettexturewidth = lgifn("lgilib_gettexturewidth")
lgi_gettextureheight = lgifn("lgilib_gettextureheight")
lgi_setsampler = lgifn("lgilib_setsampler")
lgi_bindtexture = lgifn("lgilib_bindtexture")
lgi_beginvertices = lgifn("lgilib_beginvertices")
lgi_closevertices = lgifn("lgilib_closevertices")
lgi_addnidx = lgifn("lgilib_addnidx")
lgi_attrrgba = lgifn("lgilib_attrrgba")
lgi_attrxyzw = lgifn("lgilib_attrxyzw")
lgi_attrxyuv = lgifn("lgilib_attrxyuv")
lgi_attruv = lgifn("lgilib_attruv")
lgi_pushvertex = lgifn("lgilib_pushvertex")


lgi_drawline = fun (color,thickness,x0,y0,x1,y1) ? {
	color ?= lgi_WHITE
	let r = color.r
	let g = color.g
	let b = color.b
	let a = color.a
	lgi_drawline_(r,g,b,a,thickness,x0,y0,x1,y1)
}


lgi_drawQuad = fun (color,x,y,w,h) ? {
	color ?= lgi_WHITE
	let r = color.r
	let g = color.g
	let b = color.b
	let a = color.a
	lgi_drawQuad_(r,g,b,a,x,y,w,h)
}


lgi_drawQuadUV = fun (color,tex,x,y,w,h) ? {
	color ?= lgi_WHITE
	let r = color.r
	let g = color.g
	let b = color.b
	let a = color.a
	lgi_drawQuadUV_(r,g,b,a,x,y,w,h,tex)
}


lgi_drawtexture = fun(tex,x,y,xx,yy,u,v,uu,vv) ? {
	let w = lgi_gettexturewidth(tex)
	let h = lgi_gettextureheight(tex)
	/* todo: do this better */
	u = u / 1. / w
	v = v / 1. / h
	uu = uu / 1. / w
	vv = vv / 1. / h
	lgi_bindtexture(tex)
	lgi_beginvertices(6,4)
	lgi_attrrgba(1,1,1,1)
	lgi_addnidx(0,1,2, 0,2,3)
	lgi_attrxyuv(x   ,y   ,u   ,v+vv) lgi_pushvertex()
	lgi_attrxyuv(x   ,y+yy,u   ,v   ) lgi_pushvertex()
	lgi_attrxyuv(x+xx,y+yy,u+uu,v   ) lgi_pushvertex()
	lgi_attrxyuv(x+xx,y   ,u+uu,v+vv) lgi_pushvertex()
	lgi_closevertices()
}


let enum RGB = fun(r,g,b) ? {
	let color = {}
	color.r = r
	color.g = g
	color.b = b
	color.a = 1
	leave color
}


let enum RGBU = fun(r,g,b) ? RGB(r/255.,g/255.,b/255.)


lgi_CLEAR = RGBU(0xFF, 0xFF, 0xFF, 0x00)
lgi_WHITE = RGBU(0xFF, 0xFF, 0xFF, 0xFF)
lgi_GRAY = RGBU(0x80, 0x80, 0x80, 0xFF)
lgi_BLACK = RGBU(0x00, 0x00, 0x00, 0xFF)
lgi_RED = RGBU(0xFF, 0x00, 0x00, 0xFF)
lgi_GREEN = RGBU(0x00, 0xFF, 0x00, 0xFF)
lgi_BLUE = RGBU(0x00, 0x00, 0xFF, 0xFF)
lgi_YELLOW = RGBU(0xFF, 0xFF, 0x00, 0xFF)
lgi_CYAN = RGBU(0x00, 0xFF, 0xFF, 0xFF)
lgi_MAGENTA = RGBU(0xFF, 0x00, 0xFF, 0xFF)
lgi_ORANGE = RGBU(0xFF, 0xA5, 0x00, 0xFF)
lgi_PURPLE = RGBU(0x80, 0x00, 0x80, 0xFF)
lgi_PINK = RGBU(0xFF, 0xC0, 0xCB, 0xFF)
lgi_LIME = RGBU(0x00, 0xFF, 0x00, 0xFF)
lgi_TEAL = RGBU(0x00, 0x80, 0x80, 0xFF)
lgi_SKY_BLUE = RGBU(0x87, 0xCE, 0xEB, 0xFF)
lgi_GOLD = RGBU(0xFF, 0xD7, 0x00, 0xFF)
lgi_INDIGO = RGBU(0x4B, 0x00, 0x82, 0xFF)
lgi_SILVER = RGBU(0xC0, 0xC0, 0xC0, 0xFF)
lgi_TURQUOISE = RGBU(0x40, 0xE0, 0xD0, 0xFF)
lgi_CORAL = RGBU(0xFF, 0x7F, 0x50, 0xFF)
lgi_ORCHID = RGBU(0xDA, 0x70, 0xD6, 0xFF)
lgi_LAVENDER = RGBU(0xE6, 0xE6, 0xFA, 0xFF)
lgi_MAROON = RGBU(0x80, 0x00, 0x00, 0xFF)
lgi_NAVY = RGBU(0x00, 0x00, 0x80, 0xFF)
lgi_OLIVE = RGBU(0x80, 0x80, 0x00, 0xFF)
lgi_SALMON = RGBU(0xFA, 0x80, 0x72, 0xFF)
lgi_AQUAMARINE = RGBU(0x7F, 0xFF, 0xD4, 0xFF)







leave true