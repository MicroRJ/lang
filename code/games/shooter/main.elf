
log ?= elf.pf
if load "code/ray.elf" != true ? {
	leave false
}

if _chdir("code/games/shooter") ? {
	log("invalid pwd: ", pwd())
	leave false
}

load "vec.elf"
load "rnd.lang"


UP    = vec3( 0, 1, 0)
LEFT  = vec3(-1, 0, 0)
RIGHT = vec3( 1, 0, 0)
DOWN  = vec3( 0,-1, 0)

PlayerController = fun(entity) ? {
	let move = vec3(0,0,0)
	if elf.ray.IsKeyDown('W') ? move = move:add(DOWN)
	if elf.ray.IsKeyDown('A') ? move = move:add(LEFT)
	if elf.ray.IsKeyDown('S') ? move = move:add(UP)
	if elf.ray.IsKeyDown('D') ? move = move:add(RIGHT)
	/* todo: */
	entity.pos = entity.pos:add(move:norm():mul1(4))
}
EnemyController = fun(entity) ? {
	let pos = entity.pos
	let diftoplayer = Player.pos:sub(pos)
	let distoplayer = diftoplayer:len()
	let facing = diftoplayer:norm()
	let target = diftoplayer:sub(facing:mul(64.))
	if timediffs(entity.lastimpulse) > .5 ? {
		entity.lastimpulse = clocktime()
		let imp = rnddir2(-PI,+PI,target:norm())
		entity.vel = entity.vel:add(imp:mul1(10))
	}
	entity.pos = pos:add(entity.vel)
	entity.vel = entity.vel:mul1(.9)
	entity.facing = facing:clone()
	/* only fire if we are facing the player, and we can see it */
	entity.firing = ntoi(distoplayer < 512)
}


Entities = {}


NewEntity = fun(pos,fr) ? {
	/* firerate rps, rounds per minute */
	fr ?= 50
	let entity = ({
		controller = EnemyController,
		pos = pos,
		vel = vec(),
		facing = UP,
		tofacing = UP,
		firing = false,
		firerate = fr,
		lastfire = 0,
		ulttimer = 0,
		health = 100,
		muscleflashduration = .032,
		lastimpulse = clocktime(),
	})
	Entities:add(entity)
	leave entity
}
DrawEntity = fun(entity) ? {
	let firerate = entity.firerate
	/* todo: little bloom or fadein/out effect? */
	let firing = entity.firing
	if firing == true ? {
		let muscleflashduration = entity.muscleflashduration
		Fire(entity)
		firing = timediffs(entity.lastfire) < muscleflashduration
	}
	let facingangle = 90 - todeg(entity.facing:angle())
	elf.ray.SetShapesTexture(Textures.Player,firing*48,0,48,48)
	elf.ray.DrawRectanglePro(entity.pos.x,entity.pos.y,128,128,64,64,facingangle,elf.ray.WHITE)
}
Player = NewEntity(vec2(0,0),700)
Player.controller = PlayerController
for i in 0..3 ? {
	NewEntity(vec2(rnd(-20,+20),rnd(-20,+128)))
}
Particles = {}
Fire = fun(entity) ? {
	let firerate = entity.firerate
	let lastfire = entity.lastfire
	if timediffs(lastfire) > (1./(firerate/60.)) ? {
		entity.lastfire = clocktime()
		Particles:add({
			"from" = entity,
			"pos" = entity.pos:clone(),
			"vel" = entity.facing:mul1(3000),
		})
	}
}



elf.ray.InitWindow(1024,720,"shooter")
finally elf.ray.CloseWindow()

log("Loading Assets: ...")
Textures = {
	Player = elf.ray.LoadTexture("assets/Atlas.png"),
	Background = elf.ray.LoadTexture("assets/background.png"),
}
log("Done")


Camera = {
	offset = vec2(512,360),
	target = vec(),
	targetpos = vec(),
	rotation = 0.,
	zoom = 1.,
}


ShakeCamera = fun (mag) ? {
	let jitter = vec3(rnd(-1.,2.),rnd(-1.,2.),0.):norm():mul1(mag)
	/* todo: maybe add a feature like this := which
	removes this redundancy */
	Camera.targetpos = Camera.targetpos:add(jitter)
}

elf.ray.SetTargetFPS(60);

/* Main Loop */
while elf.ray.WindowShouldClose() == false ? {
	let delta = elf.ray.GetFrameTime()

	let cursor = vec2(elf.ray.GetMouseX(),elf.ray.GetMouseY())
	let playeronscreen = elf.ray.GetWorldToScreen2D(Camera,Player.pos)
	Player.facing = cursor:sub(playeronscreen):norm()
	if elf.ray.IsMouseButtonDown(0) ? {
		Player.firing = true
		ShakeCamera(50.)
	} else Player.firing = false

	for i in Entities:length() ? {
		let entity = Entities:idx(i)
		if entity != nil ? {
			entity.controller(entity)
		}
	}

	/* Update camera */
	if true ? {
		let diff = Player.pos:sub(Camera.targetpos)
		Camera.targetpos = Camera.targetpos:add(diff:mul1(.5))
	}
	Camera.target = Camera.target:lerp(Camera.targetpos,.1)

	/* update particles */
	for i in Particles:length() ? {
		let bullet = Particles:idx(i)
		if bullet != nil ? {
			let bulpos = bullet.pos:add(bullet.vel:mul1(delta))
			bullet.vel = bullet.vel:mul1(0.999)
			bullet.pos = bulpos
			// if bulpos:sub(bullet.from.xyz):len() > 1024 ? {
			// 	Particles:xrem(i) i = i - 1
			// }
		}
	}


	elf.ray.BeginDrawing()
		elf.ray.ClearBackground(elf.ray.DARKGRAY)
		elf.ray.BeginMode2D(Camera)
			/* draw all the particles */
			elf.ray.SetShapesTexture(Textures.Player,8*16,4*16,16,16)
			for i in Particles:length() ? {
				let bullet = Particles:idx(i)
				if bullet != nil ? {
					elf.ray.DrawRectangle(bullet.pos.x-16,bullet.pos.y-16,32,32,elf.ray.WHITE)
				}
			}
			for i in Entities:length() ? {
				let entity = Entities:idx(i)
				if entity != nil ? {
					DrawEntity(entity)
				}
			}
			let buf = ftemp()
			fpf(buf,"fps: ", elf.ray.GetFPS(), " ngc: ", elf.GCN(), " mgc: ", elf.GCM()/1024/1024)
			elf.ray.DrawText(freadall(buf),0,0,20,elf.ray.RED);
			fclose(buf)
		elf.ray.EndMode2D()
	elf.ray.EndDrawing()
}

leave 0


// elf.audio.play("welcome.mp3")
// let sound = elf.audio.newsound("welcome.mp3")
// let thread = elf.threads.create(fun() ? {
// })
// thread:launch()
// thread:join()
// elf.threads.post()
// elf.sys.timediffs()
// elf.sys.closehandles()
//
// let file = elf.sys.file("filename.png","rbw")
// file:read()
// file:write()
//
// elf.win32.Sleep()
// elf.win32.CreateThread()
// elf.win32.CreateWindow()
// elf.console.write()
// elf.console.read()
// /* the first window created is the main window */
/* not sure if video, or vio, for video io */
// elf.video.window(720,720,"Welcome")
// elf.video.resize(720,720)
// elf.video.nologo()
// /* a target can be a window or texture */
// elf.video.target(elf.video.MAINWINDOW)
// elf.video.camera({})
// elf.video.mode3d()
// elf.video.mode2d()
// elf.video.clear()
// elf.video.clearcolor()
// elf.video.colormode()
// elf.video.loadshader()
// elf.video.bindshader()
// elf.video.loadtexture()
// elf.video.bindtexture()
//