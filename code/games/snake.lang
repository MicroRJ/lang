import "code/core/core.el"
import "code/core/lgi.el"

FLOOR ::= 0
APPLE ::= 1
SNAKE ::= 2

Snake :: struct {
	// the body
	b: int2 *[]*
	// the direction
	d: int2 *
	// the length
	l: int
	// when the snake moves only 3 cells have to be updated,
	// the new head position, the new tail position, and the
	// the old tail position which has to be cleared to floor
	// since the snake is no longer there
	t: int2 *

	collided: bool
}

redraw :: (grid: int[]*, size: int, cell_size: int) -> int {
	for y in 0..size  ? {
		for x in 0..size ? {
			i := y * size + x
			color := lgi.COLOR_BLACK
			cell := grid[i]
			if cell == 1 ? {
				color = lgi.COLOR_GREEN
			}
			if cell == 2 ? {
				color = lgi.COLOR_RED
			}
			if cell != 0 ? {
				box_x := iton(x * cell_size + x * 2)
				box_y := iton(y * cell_size + y * 2)
				// NOTE: for this little animation thing to work we would
				// need to store the direction in each snake part
				// if cell == 2 ? {
				// 	box_x = box_x + 5. + sin(time + iton(i)*5.)*10.
				// 	// box_y = box_y * sin(time)
				// }
				draw_box(box_x,box_y,cell_size,cell_size,2.,color)
			}
		}
	}

	ret 0
}

add_snake :: (grid: int[]*, size: int, p: int2 *, l: int, d: int2 *) -> Snake * {
	b := new int2 *[100]
	s := new Snake {}
	s.l = l
	s.b = b
	s.d = d
	s.collided = false

	// the starting point correlates to the position of the tail since
	// the head is at index zero, so it means the tail should be at p,
	// and the head should be at p + d * l
	// __dbg()
	for i in 0..l ? {
		grid[size * p.y + p.x] = SNAKE
		b[l-1 - i] = new int2{p.x,p.y}
		p = int2_add(p,d)
	}
	// __dbg()
	if isnull(b[0]) ? __dbg()
	ret s
}

add_apple :: (grid: int[]*, size: int) -> int {
	papl := 0
	iapl := SNAKE
	for iapl == SNAKE ? {
		papl = rnd(0,size*size)
		iapl = grid[papl]
	}
	grid[papl] = APPLE

	ret seed
}

mov_snake :: (grid: int[]*, size: int, snake: Snake *, d: int2 *) -> int {
	l := snake.l
	b := snake.b
	// compute the new head here before it gets overwritten,
	// also check for collisions
	if isnull(b[0]) ? {
		__dbg()
	}
	if isnull(d) ? {
		__dbg()
	}
	n := int2_add(b[0],d)

	if n.x < 0 ? {
		snake.collided = true
		ret 0
	}
	if n.y < 0 ? {
		snake.collided = true
		ret 0
	}
	if size <= n.x ? {
		snake.collided = true
		ret 0
	}
	if size <= n.y ? {
		snake.collided = true
		ret 0
	}

	// save the tail in case we eat apple, when we shift the snake forwards we loose the tail so we
	// need to repopulate it to grow, we also use this for clearing the grid in case we did not eat an apple,
	// in which case there will be no snake part present in the tail slot
	t := b[l-1]

	i := l-1
	for 0 < i ? {
		b[i] = b[i-1]
		i = i - 1
	}

	b[0] = n

	// store the previous head value to check for collisions, don't generate apple
	// yet to avoid overwriting the apple with a snake part
	v := grid[n.y * size + n.x]

	// if we ate an apple simply restore the tail at one past the previous tail position
	if v == APPLE ? {
		b[l] = t
		l = l + 1
	}

	if v != APPLE ? {
		// if we did not grow then clear the old tail, this will visually glitch the snake
		// if the last tail position overlaps any part of the snake, which will consequently
		// get cleared.
		// The point of the game is for that not to happen, so it doesn't really matter however,
		// to help a bit prevent this.
		// We do redraw the new head and tail only after we've cleared, so that could help
		// if we only overlap the head or tail.
		grid[t.y * size + t.x] = FLOOR
	}

	// redraw the head now that it moved
	grid[n.y * size + n.x] = SNAKE

	// redraw the tail now that it moved
	p := b[l-1]
	grid[p.y * size + p.x] = SNAKE


	if v == APPLE ? {
		add_apple(grid,size)
	}

	if isnull(d) ? __dbg()
	snake.d = d
	snake.l = l


	ret seed
}

main :: () -> int {
	LEFT  ::= new int2 {-1, 0 }
	RIGHT ::= new int2 { 1, 0 }
	UP    ::= new int2 { 0, 1 }
	DOWN  ::= new int2 { 0,-1 }

	cell_size := 32
	grid_size := 16
	grid := new int [grid_size*grid_size]

	// TODO: figure out why the heck this isn't matching up!
	lgi_initAll((cell_size+3)*grid_size,(cell_size+3)*grid_size, "snake")

	snake := add_snake(grid,grid_size,new int2 {0,0},2, UP)

	// __dbg()
	if isnull(snake.d) ? __dbg()


	add_apple(grid,grid_size)

	no_error := 1

	turn_timer := .128

	game_over := 0
	for no_error ? {
		size_x ::= lgi_getSizeX()
		size_y ::= lgi_getSizeY()
		delta ::= lgi_time()

		// [[TODO]]: do polling every tick but only render when necessary
		if lgi_testKey('W') ? {
			snake.d = UP
		}
		if lgi_testKey('S') ? {
			snake.d = DOWN
		}
		if lgi_testKey('A') ? {
			snake.d = LEFT
		}
		if lgi_testKey('D') ? {
			snake.d = RIGHT
		}

		if turn_timer <= 0.  ? {
			if isnull(snake.d) ? __dbg()
			mov_snake(grid,grid_size,snake,snake.d)
			turn_timer = .128
		}
		turn_timer = turn_timer - delta
		// lgi_drawTextLine(size_x/2, size_y/2, __fmt("turn timer %", turn_timer))

		lgi_clearBackgroundColor(lgi.COLOR_BLACK);
		lgi_beginMode2D()
		// todo: can we get this to only redraw when needed?
		redraw(grid,grid_size,cell_size)
		no_error = lgi_tick()

		if snake.collided ? {
			lgi_drawTextLine(size_x / 2, size_y / 2, "GAME OVER")
		}
	}

	ret 0
}

